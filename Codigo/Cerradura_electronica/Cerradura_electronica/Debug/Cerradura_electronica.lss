
Cerradura_electronica.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000004fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004a8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000052c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000100  00000000  00000000  0000056c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000013cf  00000000  00000000  0000066c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009aa  00000000  00000000  00001a3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a82  00000000  00000000  000023e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002d4  00000000  00000000  00002e68  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005ac  00000000  00000000  0000313c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000114a  00000000  00000000  000036e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000110  00000000  00000000  00004832  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 cc 00 	jmp	0x198	; 0x198 <__ctors_end>
   4:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
   8:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
   c:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
  10:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
  14:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
  18:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
  1c:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
  20:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
  24:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
  28:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
  2c:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
  30:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
  34:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
  38:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
  3c:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
  40:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
  44:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
  48:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
  4c:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
  50:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
  54:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
  58:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
  5c:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
  60:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
  64:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
  68:	db 01       	movw	r26, r22
  6a:	29 02       	muls	r18, r25
  6c:	29 02       	muls	r18, r25
  6e:	29 02       	muls	r18, r25
  70:	df 01       	movw	r26, r30
  72:	29 02       	muls	r18, r25
  74:	e3 01       	movw	r28, r6
  76:	e7 01       	movw	r28, r14
  78:	29 02       	muls	r18, r25
  7a:	29 02       	muls	r18, r25
  7c:	29 02       	muls	r18, r25
  7e:	29 02       	muls	r18, r25
  80:	29 02       	muls	r18, r25
  82:	29 02       	muls	r18, r25
  84:	29 02       	muls	r18, r25
  86:	29 02       	muls	r18, r25
  88:	29 02       	muls	r18, r25
  8a:	29 02       	muls	r18, r25
  8c:	29 02       	muls	r18, r25
  8e:	29 02       	muls	r18, r25
  90:	29 02       	muls	r18, r25
  92:	29 02       	muls	r18, r25
  94:	29 02       	muls	r18, r25
  96:	29 02       	muls	r18, r25
  98:	29 02       	muls	r18, r25
  9a:	29 02       	muls	r18, r25
  9c:	29 02       	muls	r18, r25
  9e:	29 02       	muls	r18, r25
  a0:	29 02       	muls	r18, r25
  a2:	29 02       	muls	r18, r25
  a4:	29 02       	muls	r18, r25
  a6:	29 02       	muls	r18, r25
  a8:	29 02       	muls	r18, r25
  aa:	29 02       	muls	r18, r25
  ac:	29 02       	muls	r18, r25
  ae:	29 02       	muls	r18, r25
  b0:	29 02       	muls	r18, r25
  b2:	29 02       	muls	r18, r25
  b4:	29 02       	muls	r18, r25
  b6:	29 02       	muls	r18, r25
  b8:	29 02       	muls	r18, r25
  ba:	29 02       	muls	r18, r25
  bc:	29 02       	muls	r18, r25
  be:	29 02       	muls	r18, r25
  c0:	29 02       	muls	r18, r25
  c2:	29 02       	muls	r18, r25
  c4:	29 02       	muls	r18, r25
  c6:	29 02       	muls	r18, r25
  c8:	29 02       	muls	r18, r25
  ca:	29 02       	muls	r18, r25
  cc:	29 02       	muls	r18, r25
  ce:	29 02       	muls	r18, r25
  d0:	29 02       	muls	r18, r25
  d2:	29 02       	muls	r18, r25
  d4:	29 02       	muls	r18, r25
  d6:	29 02       	muls	r18, r25
  d8:	29 02       	muls	r18, r25
  da:	29 02       	muls	r18, r25
  dc:	29 02       	muls	r18, r25
  de:	29 02       	muls	r18, r25
  e0:	29 02       	muls	r18, r25
  e2:	29 02       	muls	r18, r25
  e4:	29 02       	muls	r18, r25
  e6:	29 02       	muls	r18, r25
  e8:	eb 01       	movw	r28, r22
  ea:	29 02       	muls	r18, r25
  ec:	29 02       	muls	r18, r25
  ee:	29 02       	muls	r18, r25
  f0:	ef 01       	movw	r28, r30
  f2:	29 02       	muls	r18, r25
  f4:	f3 01       	movw	r30, r6
  f6:	f7 01       	movw	r30, r14
  f8:	29 02       	muls	r18, r25
  fa:	29 02       	muls	r18, r25
  fc:	29 02       	muls	r18, r25
  fe:	29 02       	muls	r18, r25
 100:	29 02       	muls	r18, r25
 102:	29 02       	muls	r18, r25
 104:	29 02       	muls	r18, r25
 106:	29 02       	muls	r18, r25
 108:	29 02       	muls	r18, r25
 10a:	29 02       	muls	r18, r25
 10c:	29 02       	muls	r18, r25
 10e:	29 02       	muls	r18, r25
 110:	29 02       	muls	r18, r25
 112:	29 02       	muls	r18, r25
 114:	29 02       	muls	r18, r25
 116:	29 02       	muls	r18, r25
 118:	29 02       	muls	r18, r25
 11a:	29 02       	muls	r18, r25
 11c:	29 02       	muls	r18, r25
 11e:	29 02       	muls	r18, r25
 120:	29 02       	muls	r18, r25
 122:	29 02       	muls	r18, r25
 124:	29 02       	muls	r18, r25
 126:	29 02       	muls	r18, r25
 128:	fb 01       	movw	r30, r22
 12a:	29 02       	muls	r18, r25
 12c:	29 02       	muls	r18, r25
 12e:	29 02       	muls	r18, r25
 130:	ff 01       	movw	r30, r30
 132:	29 02       	muls	r18, r25
 134:	03 02       	muls	r16, r19
 136:	07 02       	muls	r16, r23
 138:	29 02       	muls	r18, r25
 13a:	29 02       	muls	r18, r25
 13c:	29 02       	muls	r18, r25
 13e:	29 02       	muls	r18, r25
 140:	29 02       	muls	r18, r25
 142:	29 02       	muls	r18, r25
 144:	29 02       	muls	r18, r25
 146:	29 02       	muls	r18, r25
 148:	0b 02       	muls	r16, r27
 14a:	29 02       	muls	r18, r25
 14c:	29 02       	muls	r18, r25
 14e:	29 02       	muls	r18, r25
 150:	0f 02       	muls	r16, r31
 152:	29 02       	muls	r18, r25
 154:	13 02       	muls	r17, r19
 156:	17 02       	muls	r17, r23

00000158 <LcdCustomChar>:
 158:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
 168:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
 178:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
 188:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

00000198 <__ctors_end>:
 198:	11 24       	eor	r1, r1
 19a:	1f be       	out	0x3f, r1	; 63
 19c:	cf ef       	ldi	r28, 0xFF	; 255
 19e:	d8 e0       	ldi	r29, 0x08	; 8
 1a0:	de bf       	out	0x3e, r29	; 62
 1a2:	cd bf       	out	0x3d, r28	; 61

000001a4 <__do_clear_bss>:
 1a4:	21 e0       	ldi	r18, 0x01	; 1
 1a6:	a0 e0       	ldi	r26, 0x00	; 0
 1a8:	b1 e0       	ldi	r27, 0x01	; 1
 1aa:	01 c0       	rjmp	.+2      	; 0x1ae <.do_clear_bss_start>

000001ac <.do_clear_bss_loop>:
 1ac:	1d 92       	st	X+, r1

000001ae <.do_clear_bss_start>:
 1ae:	a0 30       	cpi	r26, 0x00	; 0
 1b0:	b2 07       	cpc	r27, r18
 1b2:	e1 f7       	brne	.-8      	; 0x1ac <.do_clear_bss_loop>
 1b4:	0e 94 2d 02 	call	0x45a	; 0x45a <main>
 1b8:	0c 94 52 02 	jmp	0x4a4	; 0x4a4 <_exit>

000001bc <__bad_interrupt>:
 1bc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001c0 <LCDsendChar>:
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
 1c0:	98 2f       	mov	r25, r24
 1c2:	90 7f       	andi	r25, 0xF0	; 240
 1c4:	95 b9       	out	0x05, r25	; 5
 1c6:	28 9a       	sbi	0x05, 0	; 5
 1c8:	2a 9a       	sbi	0x05, 2	; 5
 1ca:	2a e6       	ldi	r18, 0x6A	; 106
 1cc:	2a 95       	dec	r18
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <LCDsendChar+0xc>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <LCDsendChar+0x12>
 1d2:	2a 98       	cbi	0x05, 2	; 5
 1d4:	28 98       	cbi	0x05, 0	; 5
 1d6:	9a e6       	ldi	r25, 0x6A	; 106
 1d8:	9a 95       	dec	r25
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <LCDsendChar+0x18>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <LCDsendChar+0x1e>
 1de:	20 e1       	ldi	r18, 0x10	; 16
 1e0:	82 9f       	mul	r24, r18
 1e2:	c0 01       	movw	r24, r0
 1e4:	11 24       	eor	r1, r1
 1e6:	85 b9       	out	0x05, r24	; 5
 1e8:	28 9a       	sbi	0x05, 0	; 5
 1ea:	2a 9a       	sbi	0x05, 2	; 5
 1ec:	8a e6       	ldi	r24, 0x6A	; 106
 1ee:	8a 95       	dec	r24
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <LCDsendChar+0x2e>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <LCDsendChar+0x34>
 1f4:	2a 98       	cbi	0x05, 2	; 5
 1f6:	28 98       	cbi	0x05, 0	; 5
 1f8:	9a e6       	ldi	r25, 0x6A	; 106
 1fa:	9a 95       	dec	r25
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <LCDsendChar+0x3a>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <LCDsendChar+0x40>
 200:	08 95       	ret

00000202 <LCDsendCommand>:
 202:	98 2f       	mov	r25, r24
 204:	90 7f       	andi	r25, 0xF0	; 240
 206:	95 b9       	out	0x05, r25	; 5
 208:	2a 9a       	sbi	0x05, 2	; 5
 20a:	ef ec       	ldi	r30, 0xCF	; 207
 20c:	f7 e0       	ldi	r31, 0x07	; 7
 20e:	31 97       	sbiw	r30, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <LCDsendCommand+0xc>
 212:	00 c0       	rjmp	.+0      	; 0x214 <LCDsendCommand+0x12>
 214:	00 00       	nop
 216:	2a 98       	cbi	0x05, 2	; 5
 218:	ef ec       	ldi	r30, 0xCF	; 207
 21a:	f7 e0       	ldi	r31, 0x07	; 7
 21c:	31 97       	sbiw	r30, 0x01	; 1
 21e:	f1 f7       	brne	.-4      	; 0x21c <LCDsendCommand+0x1a>
 220:	00 c0       	rjmp	.+0      	; 0x222 <LCDsendCommand+0x20>
 222:	00 00       	nop
 224:	f0 e1       	ldi	r31, 0x10	; 16
 226:	8f 9f       	mul	r24, r31
 228:	c0 01       	movw	r24, r0
 22a:	11 24       	eor	r1, r1
 22c:	85 b9       	out	0x05, r24	; 5
 22e:	2a 9a       	sbi	0x05, 2	; 5
 230:	8f ec       	ldi	r24, 0xCF	; 207
 232:	97 e0       	ldi	r25, 0x07	; 7
 234:	01 97       	sbiw	r24, 0x01	; 1
 236:	f1 f7       	brne	.-4      	; 0x234 <LCDsendCommand+0x32>
 238:	00 c0       	rjmp	.+0      	; 0x23a <LCDsendCommand+0x38>
 23a:	00 00       	nop
 23c:	2a 98       	cbi	0x05, 2	; 5
 23e:	ef ec       	ldi	r30, 0xCF	; 207
 240:	f7 e0       	ldi	r31, 0x07	; 7
 242:	31 97       	sbiw	r30, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <LCDsendCommand+0x40>
 246:	00 c0       	rjmp	.+0      	; 0x248 <LCDsendCommand+0x46>
 248:	00 00       	nop
 24a:	08 95       	ret

0000024c <LCDGotoXY>:
 24c:	62 30       	cpi	r22, 0x02	; 2
 24e:	31 f0       	breq	.+12     	; 0x25c <LCDGotoXY+0x10>
 250:	63 30       	cpi	r22, 0x03	; 3
 252:	31 f0       	breq	.+12     	; 0x260 <LCDGotoXY+0x14>
 254:	61 30       	cpi	r22, 0x01	; 1
 256:	29 f4       	brne	.+10     	; 0x262 <LCDGotoXY+0x16>
 258:	80 5c       	subi	r24, 0xC0	; 192
 25a:	03 c0       	rjmp	.+6      	; 0x262 <LCDGotoXY+0x16>
 25c:	8c 5e       	subi	r24, 0xEC	; 236
 25e:	01 c0       	rjmp	.+2      	; 0x262 <LCDGotoXY+0x16>
 260:	8c 5a       	subi	r24, 0xAC	; 172
 262:	80 68       	ori	r24, 0x80	; 128
 264:	0e 94 01 01 	call	0x202	; 0x202 <LCDsendCommand>
 268:	08 95       	ret

0000026a <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
 26a:	ff 92       	push	r15
 26c:	0f 93       	push	r16
 26e:	1f 93       	push	r17
 270:	cf 93       	push	r28
 272:	df 93       	push	r29
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
 274:	66 0f       	add	r22, r22
 276:	66 0f       	add	r22, r22
 278:	66 0f       	add	r22, r22
 27a:	60 64       	ori	r22, 0x40	; 64
 27c:	ec 01       	movw	r28, r24
 27e:	68 94       	set
 280:	ff 24       	eor	r15, r15
 282:	f3 f8       	bld	r15, 3
 284:	f6 0e       	add	r15, r22
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
 286:	fe 01       	movw	r30, r28
 288:	04 91       	lpm	r16, Z
		LCDsendCommand(a++);
 28a:	11 e0       	ldi	r17, 0x01	; 1
 28c:	16 0f       	add	r17, r22
 28e:	86 2f       	mov	r24, r22
 290:	0e 94 01 01 	call	0x202	; 0x202 <LCDsendCommand>
		LCDsendChar(pcc);
 294:	80 2f       	mov	r24, r16
 296:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCDsendChar>
 29a:	21 96       	adiw	r28, 0x01	; 1
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
 29c:	61 2f       	mov	r22, r17
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
 29e:	1f 11       	cpse	r17, r15
 2a0:	f2 cf       	rjmp	.-28     	; 0x286 <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
 2a2:	df 91       	pop	r29
 2a4:	cf 91       	pop	r28
 2a6:	1f 91       	pop	r17
 2a8:	0f 91       	pop	r16
 2aa:	ff 90       	pop	r15
 2ac:	08 95       	ret

000002ae <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
void LCDinit(void)//Initializes LCD
{
 2ae:	1f 93       	push	r17
 2b0:	cf 93       	push	r28
 2b2:	df 93       	push	r29
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b4:	8f e2       	ldi	r24, 0x2F	; 47
 2b6:	95 e7       	ldi	r25, 0x75	; 117
 2b8:	01 97       	sbiw	r24, 0x01	; 1
 2ba:	f1 f7       	brne	.-4      	; 0x2b8 <LCDinit+0xa>
 2bc:	00 c0       	rjmp	.+0      	; 0x2be <LCDinit+0x10>
 2be:	00 00       	nop
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
 2c0:	15 b8       	out	0x05, r1	; 5
	LCP=0x00;
 2c2:	15 b8       	out	0x05, r1	; 5
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
 2c4:	84 b1       	in	r24, 0x04	; 4
 2c6:	80 6f       	ori	r24, 0xF0	; 240
 2c8:	84 b9       	out	0x04, r24	; 4
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
 2ca:	84 b1       	in	r24, 0x04	; 4
 2cc:	87 60       	ori	r24, 0x07	; 7
 2ce:	84 b9       	out	0x04, r24	; 4
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
 2d0:	80 e3       	ldi	r24, 0x30	; 48
 2d2:	85 b9       	out	0x05, r24	; 5
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 2d4:	2a 9a       	sbi	0x05, 2	; 5
 2d6:	ef ec       	ldi	r30, 0xCF	; 207
 2d8:	f7 e0       	ldi	r31, 0x07	; 7
 2da:	31 97       	sbiw	r30, 0x01	; 1
 2dc:	f1 f7       	brne	.-4      	; 0x2da <LCDinit+0x2c>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <LCDinit+0x32>
 2e0:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 2e2:	2a 98       	cbi	0x05, 2	; 5
 2e4:	ef ec       	ldi	r30, 0xCF	; 207
 2e6:	f7 e0       	ldi	r31, 0x07	; 7
 2e8:	31 97       	sbiw	r30, 0x01	; 1
 2ea:	f1 f7       	brne	.-4      	; 0x2e8 <LCDinit+0x3a>
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <LCDinit+0x40>
 2ee:	00 00       	nop
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
 2f0:	85 b9       	out	0x05, r24	; 5
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 2f2:	2a 9a       	sbi	0x05, 2	; 5
 2f4:	8f ec       	ldi	r24, 0xCF	; 207
 2f6:	97 e0       	ldi	r25, 0x07	; 7
 2f8:	01 97       	sbiw	r24, 0x01	; 1
 2fa:	f1 f7       	brne	.-4      	; 0x2f8 <LCDinit+0x4a>
 2fc:	00 c0       	rjmp	.+0      	; 0x2fe <LCDinit+0x50>
 2fe:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 300:	2a 98       	cbi	0x05, 2	; 5
 302:	ef ec       	ldi	r30, 0xCF	; 207
 304:	f7 e0       	ldi	r31, 0x07	; 7
 306:	31 97       	sbiw	r30, 0x01	; 1
 308:	f1 f7       	brne	.-4      	; 0x306 <LCDinit+0x58>
 30a:	00 c0       	rjmp	.+0      	; 0x30c <LCDinit+0x5e>
 30c:	00 00       	nop
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
 30e:	80 e2       	ldi	r24, 0x20	; 32
 310:	85 b9       	out	0x05, r24	; 5
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 312:	2a 9a       	sbi	0x05, 2	; 5
 314:	8f ec       	ldi	r24, 0xCF	; 207
 316:	97 e0       	ldi	r25, 0x07	; 7
 318:	01 97       	sbiw	r24, 0x01	; 1
 31a:	f1 f7       	brne	.-4      	; 0x318 <LCDinit+0x6a>
 31c:	00 c0       	rjmp	.+0      	; 0x31e <LCDinit+0x70>
 31e:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 320:	2a 98       	cbi	0x05, 2	; 5
 322:	ef ec       	ldi	r30, 0xCF	; 207
 324:	f7 e0       	ldi	r31, 0x07	; 7
 326:	31 97       	sbiw	r30, 0x01	; 1
 328:	f1 f7       	brne	.-4      	; 0x326 <LCDinit+0x78>
 32a:	00 c0       	rjmp	.+0      	; 0x32c <LCDinit+0x7e>
 32c:	00 00       	nop
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
 32e:	88 e2       	ldi	r24, 0x28	; 40
 330:	0e 94 01 01 	call	0x202	; 0x202 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
 334:	8c e0       	ldi	r24, 0x0C	; 12
 336:	0e 94 01 01 	call	0x202	; 0x202 <LCDsendCommand>
 33a:	c8 e5       	ldi	r28, 0x58	; 88
 33c:	d1 e0       	ldi	r29, 0x01	; 1
		//init 8 custom chars
	uint8_t ch=0, chn=0;
 33e:	60 e0       	ldi	r22, 0x00	; 0
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
 340:	11 e0       	ldi	r17, 0x01	; 1
 342:	16 0f       	add	r17, r22
 344:	ce 01       	movw	r24, r28
 346:	0e 94 35 01 	call	0x26a	; 0x26a <LCDdefinechar>
 34a:	28 96       	adiw	r28, 0x08	; 8
 34c:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
 34e:	18 30       	cpi	r17, 0x08	; 8
 350:	b9 f7       	brne	.-18     	; 0x340 <LCDinit+0x92>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
 352:	df 91       	pop	r29
 354:	cf 91       	pop	r28
 356:	1f 91       	pop	r17
 358:	08 95       	ret

0000035a <actualizar_salida>:
			return 1;
		}
	}
	Old_key=Key; //1era verificación
	return 0;
}
 35a:	2b b1       	in	r18, 0x0b	; 11
 35c:	30 e1       	ldi	r19, 0x10	; 16
 35e:	83 9f       	mul	r24, r19
 360:	c0 01       	movw	r24, r0
 362:	11 24       	eor	r1, r1
 364:	2f 70       	andi	r18, 0x0F	; 15
 366:	82 2b       	or	r24, r18
 368:	8b b9       	out	0x0b, r24	; 11
 36a:	08 95       	ret

0000036c <KEYPAD_scan>:
 36c:	cf 93       	push	r28
 36e:	df 93       	push	r29
 370:	ec 01       	movw	r28, r24
 372:	80 ef       	ldi	r24, 0xF0	; 240
 374:	8a b9       	out	0x0a, r24	; 10
 376:	8f e0       	ldi	r24, 0x0F	; 15
 378:	8b b9       	out	0x0b, r24	; 11
 37a:	80 e0       	ldi	r24, 0x00	; 0
 37c:	0e 94 ad 01 	call	0x35a	; 0x35a <actualizar_salida>
 380:	89 b1       	in	r24, 0x09	; 9
 382:	80 6f       	ori	r24, 0xF0	; 240
 384:	8f 3f       	cpi	r24, 0xFF	; 255
 386:	09 f4       	brne	.+2      	; 0x38a <KEYPAD_scan+0x1e>
 388:	62 c0       	rjmp	.+196    	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 38a:	8e e0       	ldi	r24, 0x0E	; 14
 38c:	0e 94 ad 01 	call	0x35a	; 0x35a <actualizar_salida>
 390:	89 b1       	in	r24, 0x09	; 9
 392:	80 6f       	ori	r24, 0xF0	; 240
 394:	8f 3f       	cpi	r24, 0xFF	; 255
 396:	09 f4       	brne	.+2      	; 0x39a <KEYPAD_scan+0x2e>
 398:	4e c0       	rjmp	.+156    	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 39a:	e9 b1       	in	r30, 0x09	; 9
 39c:	8e 2f       	mov	r24, r30
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	fc 01       	movw	r30, r24
 3a2:	e7 57       	subi	r30, 0x77	; 119
 3a4:	f1 09       	sbc	r31, r1
 3a6:	e8 37       	cpi	r30, 0x78	; 120
 3a8:	f1 05       	cpc	r31, r1
 3aa:	08 f0       	brcs	.+2      	; 0x3ae <KEYPAD_scan+0x42>
 3ac:	52 c0       	rjmp	.+164    	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 3ae:	ec 5c       	subi	r30, 0xCC	; 204
 3b0:	ff 4f       	sbci	r31, 0xFF	; 255
 3b2:	0c 94 4c 02 	jmp	0x498	; 0x498 <__tablejump2__>
 3b6:	87 e3       	ldi	r24, 0x37	; 55
 3b8:	88 83       	st	Y, r24
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	4b c0       	rjmp	.+150    	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 3be:	88 e3       	ldi	r24, 0x38	; 56
 3c0:	88 83       	st	Y, r24
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	47 c0       	rjmp	.+142    	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 3c6:	89 e3       	ldi	r24, 0x39	; 57
 3c8:	88 83       	st	Y, r24
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	43 c0       	rjmp	.+134    	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 3ce:	8f e2       	ldi	r24, 0x2F	; 47
 3d0:	88 83       	st	Y, r24
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	3f c0       	rjmp	.+126    	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 3d6:	84 e3       	ldi	r24, 0x34	; 52
 3d8:	88 83       	st	Y, r24
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	3b c0       	rjmp	.+118    	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 3de:	85 e3       	ldi	r24, 0x35	; 53
 3e0:	88 83       	st	Y, r24
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	37 c0       	rjmp	.+110    	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 3e6:	86 e3       	ldi	r24, 0x36	; 54
 3e8:	88 83       	st	Y, r24
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	33 c0       	rjmp	.+102    	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 3ee:	8a e2       	ldi	r24, 0x2A	; 42
 3f0:	88 83       	st	Y, r24
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	2f c0       	rjmp	.+94     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 3f6:	81 e3       	ldi	r24, 0x31	; 49
 3f8:	88 83       	st	Y, r24
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	2b c0       	rjmp	.+86     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 3fe:	82 e3       	ldi	r24, 0x32	; 50
 400:	88 83       	st	Y, r24
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	27 c0       	rjmp	.+78     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 406:	83 e3       	ldi	r24, 0x33	; 51
 408:	88 83       	st	Y, r24
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	23 c0       	rjmp	.+70     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 40e:	8d e2       	ldi	r24, 0x2D	; 45
 410:	88 83       	st	Y, r24
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	1f c0       	rjmp	.+62     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 416:	80 e7       	ldi	r24, 0x70	; 112
 418:	88 83       	st	Y, r24
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	1b c0       	rjmp	.+54     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 41e:	80 e3       	ldi	r24, 0x30	; 48
 420:	88 83       	st	Y, r24
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	17 c0       	rjmp	.+46     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 426:	8d e3       	ldi	r24, 0x3D	; 61
 428:	88 83       	st	Y, r24
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	13 c0       	rjmp	.+38     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 42e:	8b e2       	ldi	r24, 0x2B	; 43
 430:	88 83       	st	Y, r24
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	0f c0       	rjmp	.+30     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 436:	8b b1       	in	r24, 0x0b	; 11
 438:	82 95       	swap	r24
 43a:	8f 70       	andi	r24, 0x0F	; 15
 43c:	88 0f       	add	r24, r24
 43e:	8f 5f       	subi	r24, 0xFF	; 255
 440:	0e 94 ad 01 	call	0x35a	; 0x35a <actualizar_salida>
 444:	89 b1       	in	r24, 0x09	; 9
 446:	80 6f       	ori	r24, 0xF0	; 240
 448:	8f 3f       	cpi	r24, 0xFF	; 255
 44a:	a9 f3       	breq	.-22     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 44c:	a6 cf       	rjmp	.-180    	; 0x39a <KEYPAD_scan+0x2e>
 44e:	80 e0       	ldi	r24, 0x00	; 0
 450:	01 c0       	rjmp	.+2      	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	df 91       	pop	r29
 456:	cf 91       	pop	r28
 458:	08 95       	ret

0000045a <main>:


int main(void)
{
 45a:	cf 93       	push	r28
 45c:	df 93       	push	r29
 45e:	1f 92       	push	r1
 460:	cd b7       	in	r28, 0x3d	; 61
 462:	de b7       	in	r29, 0x3e	; 62
	LCDinit();
 464:	0e 94 57 01 	call	0x2ae	; 0x2ae <LCDinit>
	LCDGotoXY(0,0);
 468:	60 e0       	ldi	r22, 0x00	; 0
 46a:	80 e0       	ldi	r24, 0x00	; 0
 46c:	0e 94 26 01 	call	0x24c	; 0x24c <LCDGotoXY>
	while (1)
	{
		uint8_t tecla=0;
 470:	19 82       	std	Y+1, r1	; 0x01
		//programa de testeo del KEYPAD_scan
		if(KEYPAD_scan(&tecla)){
 472:	ce 01       	movw	r24, r28
 474:	01 96       	adiw	r24, 0x01	; 1
 476:	0e 94 b6 01 	call	0x36c	; 0x36c <KEYPAD_scan>
 47a:	88 23       	and	r24, r24
 47c:	19 f0       	breq	.+6      	; 0x484 <main+0x2a>
			LCDsendChar(tecla);
 47e:	89 81       	ldd	r24, Y+1	; 0x01
 480:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCDsendChar>
 484:	2f ef       	ldi	r18, 0xFF	; 255
 486:	80 e7       	ldi	r24, 0x70	; 112
 488:	92 e0       	ldi	r25, 0x02	; 2
 48a:	21 50       	subi	r18, 0x01	; 1
 48c:	80 40       	sbci	r24, 0x00	; 0
 48e:	90 40       	sbci	r25, 0x00	; 0
 490:	e1 f7       	brne	.-8      	; 0x48a <main+0x30>
 492:	00 c0       	rjmp	.+0      	; 0x494 <main+0x3a>
 494:	00 00       	nop
		}
		_delay_ms(100);
	}
 496:	ec cf       	rjmp	.-40     	; 0x470 <main+0x16>

00000498 <__tablejump2__>:
 498:	ee 0f       	add	r30, r30
 49a:	ff 1f       	adc	r31, r31
 49c:	05 90       	lpm	r0, Z+
 49e:	f4 91       	lpm	r31, Z
 4a0:	e0 2d       	mov	r30, r0
 4a2:	09 94       	ijmp

000004a4 <_exit>:
 4a4:	f8 94       	cli

000004a6 <__stop_program>:
 4a6:	ff cf       	rjmp	.-2      	; 0x4a6 <__stop_program>
