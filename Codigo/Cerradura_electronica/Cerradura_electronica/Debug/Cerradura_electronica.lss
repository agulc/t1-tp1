
Cerradura_electronica.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000002fc  00000370  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002fc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000012c6  00000000  00000000  000004d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008fe  00000000  00000000  00001796  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007f4  00000000  00000000  00002094  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002ac  00000000  00000000  00002888  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000055f  00000000  00000000  00002b34  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001093  00000000  00000000  00003093  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e0  00000000  00000000  00004126  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__ctors_end>
   4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  30:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  48:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  54:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  5c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000068 <LcdCustomChar>:
  68:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
  78:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
  88:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
  98:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000000a8 <__ctors_end>:
  a8:	11 24       	eor	r1, r1
  aa:	1f be       	out	0x3f, r1	; 63
  ac:	cf ef       	ldi	r28, 0xFF	; 255
  ae:	d8 e0       	ldi	r29, 0x08	; 8
  b0:	de bf       	out	0x3e, r29	; 62
  b2:	cd bf       	out	0x3d, r28	; 61

000000b4 <__do_copy_data>:
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	a0 e0       	ldi	r26, 0x00	; 0
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	ec ef       	ldi	r30, 0xFC	; 252
  bc:	f2 e0       	ldi	r31, 0x02	; 2
  be:	02 c0       	rjmp	.+4      	; 0xc4 <__do_copy_data+0x10>
  c0:	05 90       	lpm	r0, Z+
  c2:	0d 92       	st	X+, r0
  c4:	a8 30       	cpi	r26, 0x08	; 8
  c6:	b1 07       	cpc	r27, r17
  c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0xc>
  ca:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <main>
  ce:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <_exit>

000000d2 <__bad_interrupt>:
  d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <LCDsendChar>:
	LCDGotoXY(x,y);
	for(i=0;i<(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
  d6:	98 2f       	mov	r25, r24
  d8:	90 7f       	andi	r25, 0xF0	; 240
  da:	95 b9       	out	0x05, r25	; 5
  dc:	28 9a       	sbi	0x05, 0	; 5
  de:	2a 9a       	sbi	0x05, 2	; 5
  e0:	2a e6       	ldi	r18, 0x6A	; 106
  e2:	2a 95       	dec	r18
  e4:	f1 f7       	brne	.-4      	; 0xe2 <LCDsendChar+0xc>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <LCDsendChar+0x12>
  e8:	2a 98       	cbi	0x05, 2	; 5
  ea:	28 98       	cbi	0x05, 0	; 5
  ec:	9a e6       	ldi	r25, 0x6A	; 106
  ee:	9a 95       	dec	r25
  f0:	f1 f7       	brne	.-4      	; 0xee <LCDsendChar+0x18>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <LCDsendChar+0x1e>
  f4:	20 e1       	ldi	r18, 0x10	; 16
  f6:	82 9f       	mul	r24, r18
  f8:	c0 01       	movw	r24, r0
  fa:	11 24       	eor	r1, r1
  fc:	85 b9       	out	0x05, r24	; 5
  fe:	28 9a       	sbi	0x05, 0	; 5
 100:	2a 9a       	sbi	0x05, 2	; 5
 102:	8a e6       	ldi	r24, 0x6A	; 106
 104:	8a 95       	dec	r24
 106:	f1 f7       	brne	.-4      	; 0x104 <LCDsendChar+0x2e>
 108:	00 c0       	rjmp	.+0      	; 0x10a <LCDsendChar+0x34>
 10a:	2a 98       	cbi	0x05, 2	; 5
 10c:	28 98       	cbi	0x05, 0	; 5
 10e:	9a e6       	ldi	r25, 0x6A	; 106
 110:	9a 95       	dec	r25
 112:	f1 f7       	brne	.-4      	; 0x110 <LCDsendChar+0x3a>
 114:	00 c0       	rjmp	.+0      	; 0x116 <LCDsendChar+0x40>
 116:	08 95       	ret

00000118 <LCDsendCommand>:
 118:	98 2f       	mov	r25, r24
 11a:	90 7f       	andi	r25, 0xF0	; 240
 11c:	95 b9       	out	0x05, r25	; 5
 11e:	2a 9a       	sbi	0x05, 2	; 5
 120:	ef ec       	ldi	r30, 0xCF	; 207
 122:	f7 e0       	ldi	r31, 0x07	; 7
 124:	31 97       	sbiw	r30, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <LCDsendCommand+0xc>
 128:	00 c0       	rjmp	.+0      	; 0x12a <LCDsendCommand+0x12>
 12a:	00 00       	nop
 12c:	2a 98       	cbi	0x05, 2	; 5
 12e:	ef ec       	ldi	r30, 0xCF	; 207
 130:	f7 e0       	ldi	r31, 0x07	; 7
 132:	31 97       	sbiw	r30, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <LCDsendCommand+0x1a>
 136:	00 c0       	rjmp	.+0      	; 0x138 <LCDsendCommand+0x20>
 138:	00 00       	nop
 13a:	f0 e1       	ldi	r31, 0x10	; 16
 13c:	8f 9f       	mul	r24, r31
 13e:	c0 01       	movw	r24, r0
 140:	11 24       	eor	r1, r1
 142:	85 b9       	out	0x05, r24	; 5
 144:	2a 9a       	sbi	0x05, 2	; 5
 146:	8f ec       	ldi	r24, 0xCF	; 207
 148:	97 e0       	ldi	r25, 0x07	; 7
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <LCDsendCommand+0x32>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <LCDsendCommand+0x38>
 150:	00 00       	nop
 152:	2a 98       	cbi	0x05, 2	; 5
 154:	ef ec       	ldi	r30, 0xCF	; 207
 156:	f7 e0       	ldi	r31, 0x07	; 7
 158:	31 97       	sbiw	r30, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <LCDsendCommand+0x40>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <LCDsendCommand+0x46>
 15e:	00 00       	nop
 160:	08 95       	ret

00000162 <LCDGotoXY>:
 162:	62 30       	cpi	r22, 0x02	; 2
 164:	31 f0       	breq	.+12     	; 0x172 <LCDGotoXY+0x10>
 166:	63 30       	cpi	r22, 0x03	; 3
 168:	31 f0       	breq	.+12     	; 0x176 <LCDGotoXY+0x14>
 16a:	61 30       	cpi	r22, 0x01	; 1
 16c:	29 f4       	brne	.+10     	; 0x178 <LCDGotoXY+0x16>
 16e:	80 5c       	subi	r24, 0xC0	; 192
 170:	03 c0       	rjmp	.+6      	; 0x178 <LCDGotoXY+0x16>
 172:	8c 5e       	subi	r24, 0xEC	; 236
 174:	01 c0       	rjmp	.+2      	; 0x178 <LCDGotoXY+0x16>
 176:	8c 5a       	subi	r24, 0xAC	; 172
 178:	80 68       	ori	r24, 0x80	; 128
 17a:	0e 94 8c 00 	call	0x118	; 0x118 <LCDsendCommand>
 17e:	08 95       	ret

00000180 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
 180:	ff 92       	push	r15
 182:	0f 93       	push	r16
 184:	1f 93       	push	r17
 186:	cf 93       	push	r28
 188:	df 93       	push	r29
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
 18a:	66 0f       	add	r22, r22
 18c:	66 0f       	add	r22, r22
 18e:	66 0f       	add	r22, r22
 190:	60 64       	ori	r22, 0x40	; 64
 192:	ec 01       	movw	r28, r24
 194:	68 94       	set
 196:	ff 24       	eor	r15, r15
 198:	f3 f8       	bld	r15, 3
 19a:	f6 0e       	add	r15, r22
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
 19c:	fe 01       	movw	r30, r28
 19e:	04 91       	lpm	r16, Z
		LCDsendCommand(a++);
 1a0:	11 e0       	ldi	r17, 0x01	; 1
 1a2:	16 0f       	add	r17, r22
 1a4:	86 2f       	mov	r24, r22
 1a6:	0e 94 8c 00 	call	0x118	; 0x118 <LCDsendCommand>
		LCDsendChar(pcc);
 1aa:	80 2f       	mov	r24, r16
 1ac:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCDsendChar>
 1b0:	21 96       	adiw	r28, 0x01	; 1
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
 1b2:	61 2f       	mov	r22, r17
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
 1b4:	1f 11       	cpse	r17, r15
 1b6:	f2 cf       	rjmp	.-28     	; 0x19c <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	1f 91       	pop	r17
 1be:	0f 91       	pop	r16
 1c0:	ff 90       	pop	r15
 1c2:	08 95       	ret

000001c4 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
void LCDinit(void)//Initializes LCD
{
 1c4:	1f 93       	push	r17
 1c6:	cf 93       	push	r28
 1c8:	df 93       	push	r29
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ca:	8f e2       	ldi	r24, 0x2F	; 47
 1cc:	95 e7       	ldi	r25, 0x75	; 117
 1ce:	01 97       	sbiw	r24, 0x01	; 1
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <LCDinit+0xa>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <LCDinit+0x10>
 1d4:	00 00       	nop
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
 1d6:	15 b8       	out	0x05, r1	; 5
	LCP=0x00;
 1d8:	15 b8       	out	0x05, r1	; 5
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
 1da:	84 b1       	in	r24, 0x04	; 4
 1dc:	80 6f       	ori	r24, 0xF0	; 240
 1de:	84 b9       	out	0x04, r24	; 4
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
 1e0:	84 b1       	in	r24, 0x04	; 4
 1e2:	87 60       	ori	r24, 0x07	; 7
 1e4:	84 b9       	out	0x04, r24	; 4
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
 1e6:	80 e3       	ldi	r24, 0x30	; 48
 1e8:	85 b9       	out	0x05, r24	; 5
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 1ea:	2a 9a       	sbi	0x05, 2	; 5
 1ec:	ef ec       	ldi	r30, 0xCF	; 207
 1ee:	f7 e0       	ldi	r31, 0x07	; 7
 1f0:	31 97       	sbiw	r30, 0x01	; 1
 1f2:	f1 f7       	brne	.-4      	; 0x1f0 <LCDinit+0x2c>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <LCDinit+0x32>
 1f6:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 1f8:	2a 98       	cbi	0x05, 2	; 5
 1fa:	ef ec       	ldi	r30, 0xCF	; 207
 1fc:	f7 e0       	ldi	r31, 0x07	; 7
 1fe:	31 97       	sbiw	r30, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <LCDinit+0x3a>
 202:	00 c0       	rjmp	.+0      	; 0x204 <LCDinit+0x40>
 204:	00 00       	nop
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
 206:	85 b9       	out	0x05, r24	; 5
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 208:	2a 9a       	sbi	0x05, 2	; 5
 20a:	8f ec       	ldi	r24, 0xCF	; 207
 20c:	97 e0       	ldi	r25, 0x07	; 7
 20e:	01 97       	sbiw	r24, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <LCDinit+0x4a>
 212:	00 c0       	rjmp	.+0      	; 0x214 <LCDinit+0x50>
 214:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 216:	2a 98       	cbi	0x05, 2	; 5
 218:	ef ec       	ldi	r30, 0xCF	; 207
 21a:	f7 e0       	ldi	r31, 0x07	; 7
 21c:	31 97       	sbiw	r30, 0x01	; 1
 21e:	f1 f7       	brne	.-4      	; 0x21c <LCDinit+0x58>
 220:	00 c0       	rjmp	.+0      	; 0x222 <LCDinit+0x5e>
 222:	00 00       	nop
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
 224:	80 e2       	ldi	r24, 0x20	; 32
 226:	85 b9       	out	0x05, r24	; 5
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 228:	2a 9a       	sbi	0x05, 2	; 5
 22a:	8f ec       	ldi	r24, 0xCF	; 207
 22c:	97 e0       	ldi	r25, 0x07	; 7
 22e:	01 97       	sbiw	r24, 0x01	; 1
 230:	f1 f7       	brne	.-4      	; 0x22e <LCDinit+0x6a>
 232:	00 c0       	rjmp	.+0      	; 0x234 <LCDinit+0x70>
 234:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 236:	2a 98       	cbi	0x05, 2	; 5
 238:	ef ec       	ldi	r30, 0xCF	; 207
 23a:	f7 e0       	ldi	r31, 0x07	; 7
 23c:	31 97       	sbiw	r30, 0x01	; 1
 23e:	f1 f7       	brne	.-4      	; 0x23c <LCDinit+0x78>
 240:	00 c0       	rjmp	.+0      	; 0x242 <LCDinit+0x7e>
 242:	00 00       	nop
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
 244:	88 e2       	ldi	r24, 0x28	; 40
 246:	0e 94 8c 00 	call	0x118	; 0x118 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
 24a:	8c e0       	ldi	r24, 0x0C	; 12
 24c:	0e 94 8c 00 	call	0x118	; 0x118 <LCDsendCommand>
 250:	c8 e6       	ldi	r28, 0x68	; 104
 252:	d0 e0       	ldi	r29, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
 254:	60 e0       	ldi	r22, 0x00	; 0
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
 256:	11 e0       	ldi	r17, 0x01	; 1
 258:	16 0f       	add	r17, r22
 25a:	ce 01       	movw	r24, r28
 25c:	0e 94 c0 00 	call	0x180	; 0x180 <LCDdefinechar>
 260:	28 96       	adiw	r28, 0x08	; 8
 262:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
 264:	18 30       	cpi	r17, 0x08	; 8
 266:	b9 f7       	brne	.-18     	; 0x256 <LCDinit+0x92>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
 268:	df 91       	pop	r29
 26a:	cf 91       	pop	r28
 26c:	1f 91       	pop	r17
 26e:	08 95       	ret

00000270 <mostrarString>:
	//time_t t = time(NULL); //crea una variable tiempo
	//struct tm *tm = localtime(&t); //se le da el tiempo actual
	//char tiempo[64]; //variable para almacenar el tiempo como string
	//strftime(tiempo, sizeof(tiempo), "%c", tm); //guarda en el string tiempo lo que hay en tm
	//CopyStringtoLCD(&tiempo[0], 0, 1);
}
 270:	ef 92       	push	r14
 272:	ff 92       	push	r15
 274:	0f 93       	push	r16
 276:	1f 93       	push	r17
 278:	cf 93       	push	r28
 27a:	df 93       	push	r29
 27c:	7c 01       	movw	r14, r24
 27e:	86 2f       	mov	r24, r22
 280:	12 2f       	mov	r17, r18
 282:	64 2f       	mov	r22, r20
 284:	0e 94 b1 00 	call	0x162	; 0x162 <LCDGotoXY>
 288:	11 23       	and	r17, r17
 28a:	71 f0       	breq	.+28     	; 0x2a8 <mostrarString+0x38>
 28c:	e7 01       	movw	r28, r14
 28e:	11 50       	subi	r17, 0x01	; 1
 290:	01 2f       	mov	r16, r17
 292:	10 e0       	ldi	r17, 0x00	; 0
 294:	0f 5f       	subi	r16, 0xFF	; 255
 296:	1f 4f       	sbci	r17, 0xFF	; 255
 298:	0e 0d       	add	r16, r14
 29a:	1f 1d       	adc	r17, r15
 29c:	89 91       	ld	r24, Y+
 29e:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCDsendChar>
 2a2:	c0 17       	cp	r28, r16
 2a4:	d1 07       	cpc	r29, r17
 2a6:	d1 f7       	brne	.-12     	; 0x29c <mostrarString+0x2c>
 2a8:	df 91       	pop	r29
 2aa:	cf 91       	pop	r28
 2ac:	1f 91       	pop	r17
 2ae:	0f 91       	pop	r16
 2b0:	ff 90       	pop	r15
 2b2:	ef 90       	pop	r14
 2b4:	08 95       	ret

000002b6 <main>:
int main(void)
{
 2b6:	cf 93       	push	r28
 2b8:	df 93       	push	r29
 2ba:	cd b7       	in	r28, 0x3d	; 61
 2bc:	de b7       	in	r29, 0x3e	; 62
 2be:	27 97       	sbiw	r28, 0x07	; 7
 2c0:	0f b6       	in	r0, 0x3f	; 63
 2c2:	f8 94       	cli
 2c4:	de bf       	out	0x3e, r29	; 62
 2c6:	0f be       	out	0x3f, r0	; 63
 2c8:	cd bf       	out	0x3d, r28	; 61
	uint8_t locked[7] = "CERRADO";//{'c','e','r','r','a','d','o'}; //crea un string con la palabra cerrado
 2ca:	87 e0       	ldi	r24, 0x07	; 7
 2cc:	e0 e0       	ldi	r30, 0x00	; 0
 2ce:	f1 e0       	ldi	r31, 0x01	; 1
 2d0:	de 01       	movw	r26, r28
 2d2:	11 96       	adiw	r26, 0x01	; 1
 2d4:	01 90       	ld	r0, Z+
 2d6:	0d 92       	st	X+, r0
 2d8:	8a 95       	dec	r24
 2da:	e1 f7       	brne	.-8      	; 0x2d4 <main+0x1e>
	LCDinit(); //se inicializa el display
 2dc:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <LCDinit>
	LCDGotoXY(0,0);
 2e0:	60 e0       	ldi	r22, 0x00	; 0
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	0e 94 b1 00 	call	0x162	; 0x162 <LCDGotoXY>
	//muestreoInicial();
	mostrarString(locked,0,1, sizeof(locked));
 2e8:	27 e0       	ldi	r18, 0x07	; 7
 2ea:	41 e0       	ldi	r20, 0x01	; 1
 2ec:	60 e0       	ldi	r22, 0x00	; 0
 2ee:	ce 01       	movw	r24, r28
 2f0:	01 96       	adiw	r24, 0x01	; 1
 2f2:	0e 94 38 01 	call	0x270	; 0x270 <mostrarString>
 2f6:	ff cf       	rjmp	.-2      	; 0x2f6 <main+0x40>

000002f8 <_exit>:
 2f8:	f8 94       	cli

000002fa <__stop_program>:
 2fa:	ff cf       	rjmp	.-2      	; 0x2fa <__stop_program>
