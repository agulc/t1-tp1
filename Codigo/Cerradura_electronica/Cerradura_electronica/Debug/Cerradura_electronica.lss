
Cerradura_electronica.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000004ca  0000055e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  00000560  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000560  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000590  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  000005d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000147e  00000000  00000000  000006e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009f0  00000000  00000000  00001b66  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a8f  00000000  00000000  00002556  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f4  00000000  00000000  00002fe8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005d1  00000000  00000000  000032dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001578  00000000  00000000  000038ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  00004e25  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 cc 00 	jmp	0x198	; 0x198 <__ctors_end>
   4:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
   8:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
   c:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
  10:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
  14:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
  18:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
  1c:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
  20:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
  24:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
  28:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
  2c:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
  30:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
  34:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
  38:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
  3c:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
  40:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
  44:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
  48:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
  4c:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
  50:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
  54:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
  58:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
  5c:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
  60:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
  64:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
  68:	cc 01       	movw	r24, r24
  6a:	ec 01       	movw	r28, r24
  6c:	ec 01       	movw	r28, r24
  6e:	ec 01       	movw	r28, r24
  70:	ce 01       	movw	r24, r28
  72:	ec 01       	movw	r28, r24
  74:	d0 01       	movw	r26, r0
  76:	d2 01       	movw	r26, r4
  78:	ec 01       	movw	r28, r24
  7a:	ec 01       	movw	r28, r24
  7c:	ec 01       	movw	r28, r24
  7e:	ec 01       	movw	r28, r24
  80:	ec 01       	movw	r28, r24
  82:	ec 01       	movw	r28, r24
  84:	ec 01       	movw	r28, r24
  86:	ec 01       	movw	r28, r24
  88:	ec 01       	movw	r28, r24
  8a:	ec 01       	movw	r28, r24
  8c:	ec 01       	movw	r28, r24
  8e:	ec 01       	movw	r28, r24
  90:	ec 01       	movw	r28, r24
  92:	ec 01       	movw	r28, r24
  94:	ec 01       	movw	r28, r24
  96:	ec 01       	movw	r28, r24
  98:	ec 01       	movw	r28, r24
  9a:	ec 01       	movw	r28, r24
  9c:	ec 01       	movw	r28, r24
  9e:	ec 01       	movw	r28, r24
  a0:	ec 01       	movw	r28, r24
  a2:	ec 01       	movw	r28, r24
  a4:	ec 01       	movw	r28, r24
  a6:	ec 01       	movw	r28, r24
  a8:	ec 01       	movw	r28, r24
  aa:	ec 01       	movw	r28, r24
  ac:	ec 01       	movw	r28, r24
  ae:	ec 01       	movw	r28, r24
  b0:	ec 01       	movw	r28, r24
  b2:	ec 01       	movw	r28, r24
  b4:	ec 01       	movw	r28, r24
  b6:	ec 01       	movw	r28, r24
  b8:	ec 01       	movw	r28, r24
  ba:	ec 01       	movw	r28, r24
  bc:	ec 01       	movw	r28, r24
  be:	ec 01       	movw	r28, r24
  c0:	ec 01       	movw	r28, r24
  c2:	ec 01       	movw	r28, r24
  c4:	ec 01       	movw	r28, r24
  c6:	ec 01       	movw	r28, r24
  c8:	ec 01       	movw	r28, r24
  ca:	ec 01       	movw	r28, r24
  cc:	ec 01       	movw	r28, r24
  ce:	ec 01       	movw	r28, r24
  d0:	ec 01       	movw	r28, r24
  d2:	ec 01       	movw	r28, r24
  d4:	ec 01       	movw	r28, r24
  d6:	ec 01       	movw	r28, r24
  d8:	ec 01       	movw	r28, r24
  da:	ec 01       	movw	r28, r24
  dc:	ec 01       	movw	r28, r24
  de:	ec 01       	movw	r28, r24
  e0:	ec 01       	movw	r28, r24
  e2:	ec 01       	movw	r28, r24
  e4:	ec 01       	movw	r28, r24
  e6:	ec 01       	movw	r28, r24
  e8:	d4 01       	movw	r26, r8
  ea:	ec 01       	movw	r28, r24
  ec:	ec 01       	movw	r28, r24
  ee:	ec 01       	movw	r28, r24
  f0:	d6 01       	movw	r26, r12
  f2:	ec 01       	movw	r28, r24
  f4:	d8 01       	movw	r26, r16
  f6:	da 01       	movw	r26, r20
  f8:	ec 01       	movw	r28, r24
  fa:	ec 01       	movw	r28, r24
  fc:	ec 01       	movw	r28, r24
  fe:	ec 01       	movw	r28, r24
 100:	ec 01       	movw	r28, r24
 102:	ec 01       	movw	r28, r24
 104:	ec 01       	movw	r28, r24
 106:	ec 01       	movw	r28, r24
 108:	ec 01       	movw	r28, r24
 10a:	ec 01       	movw	r28, r24
 10c:	ec 01       	movw	r28, r24
 10e:	ec 01       	movw	r28, r24
 110:	ec 01       	movw	r28, r24
 112:	ec 01       	movw	r28, r24
 114:	ec 01       	movw	r28, r24
 116:	ec 01       	movw	r28, r24
 118:	ec 01       	movw	r28, r24
 11a:	ec 01       	movw	r28, r24
 11c:	ec 01       	movw	r28, r24
 11e:	ec 01       	movw	r28, r24
 120:	ec 01       	movw	r28, r24
 122:	ec 01       	movw	r28, r24
 124:	ec 01       	movw	r28, r24
 126:	ec 01       	movw	r28, r24
 128:	dc 01       	movw	r26, r24
 12a:	ec 01       	movw	r28, r24
 12c:	ec 01       	movw	r28, r24
 12e:	ec 01       	movw	r28, r24
 130:	de 01       	movw	r26, r28
 132:	ec 01       	movw	r28, r24
 134:	e0 01       	movw	r28, r0
 136:	e2 01       	movw	r28, r4
 138:	ec 01       	movw	r28, r24
 13a:	ec 01       	movw	r28, r24
 13c:	ec 01       	movw	r28, r24
 13e:	ec 01       	movw	r28, r24
 140:	ec 01       	movw	r28, r24
 142:	ec 01       	movw	r28, r24
 144:	ec 01       	movw	r28, r24
 146:	ec 01       	movw	r28, r24
 148:	e4 01       	movw	r28, r8
 14a:	ec 01       	movw	r28, r24
 14c:	ec 01       	movw	r28, r24
 14e:	ec 01       	movw	r28, r24
 150:	e6 01       	movw	r28, r12
 152:	ec 01       	movw	r28, r24
 154:	e8 01       	movw	r28, r16
 156:	ea 01       	movw	r28, r20

00000158 <LcdCustomChar>:
 158:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
 168:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
 178:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
 188:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

00000198 <__ctors_end>:
 198:	11 24       	eor	r1, r1
 19a:	1f be       	out	0x3f, r1	; 63
 19c:	cf ef       	ldi	r28, 0xFF	; 255
 19e:	d8 e0       	ldi	r29, 0x08	; 8
 1a0:	de bf       	out	0x3e, r29	; 62
 1a2:	cd bf       	out	0x3d, r28	; 61

000001a4 <__do_copy_data>:
 1a4:	11 e0       	ldi	r17, 0x01	; 1
 1a6:	a0 e0       	ldi	r26, 0x00	; 0
 1a8:	b1 e0       	ldi	r27, 0x01	; 1
 1aa:	ea ec       	ldi	r30, 0xCA	; 202
 1ac:	f4 e0       	ldi	r31, 0x04	; 4
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <__do_copy_data+0x10>
 1b0:	05 90       	lpm	r0, Z+
 1b2:	0d 92       	st	X+, r0
 1b4:	a2 30       	cpi	r26, 0x02	; 2
 1b6:	b1 07       	cpc	r27, r17
 1b8:	d9 f7       	brne	.-10     	; 0x1b0 <__do_copy_data+0xc>

000001ba <__do_clear_bss>:
 1ba:	21 e0       	ldi	r18, 0x01	; 1
 1bc:	a2 e0       	ldi	r26, 0x02	; 2
 1be:	b1 e0       	ldi	r27, 0x01	; 1
 1c0:	01 c0       	rjmp	.+2      	; 0x1c4 <.do_clear_bss_start>

000001c2 <.do_clear_bss_loop>:
 1c2:	1d 92       	st	X+, r1

000001c4 <.do_clear_bss_start>:
 1c4:	a4 30       	cpi	r26, 0x04	; 4
 1c6:	b2 07       	cpc	r27, r18
 1c8:	e1 f7       	brne	.-8      	; 0x1c2 <.do_clear_bss_loop>
 1ca:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <main>
 1ce:	0c 94 63 02 	jmp	0x4c6	; 0x4c6 <_exit>

000001d2 <__bad_interrupt>:
 1d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001d6 <LCDsendChar>:
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
 1d6:	98 2f       	mov	r25, r24
 1d8:	90 7f       	andi	r25, 0xF0	; 240
 1da:	95 b9       	out	0x05, r25	; 5
 1dc:	28 9a       	sbi	0x05, 0	; 5
 1de:	2a 9a       	sbi	0x05, 2	; 5
 1e0:	2a e6       	ldi	r18, 0x6A	; 106
 1e2:	2a 95       	dec	r18
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <LCDsendChar+0xc>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <LCDsendChar+0x12>
 1e8:	2a 98       	cbi	0x05, 2	; 5
 1ea:	28 98       	cbi	0x05, 0	; 5
 1ec:	9a e6       	ldi	r25, 0x6A	; 106
 1ee:	9a 95       	dec	r25
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <LCDsendChar+0x18>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <LCDsendChar+0x1e>
 1f4:	20 e1       	ldi	r18, 0x10	; 16
 1f6:	82 9f       	mul	r24, r18
 1f8:	c0 01       	movw	r24, r0
 1fa:	11 24       	eor	r1, r1
 1fc:	85 b9       	out	0x05, r24	; 5
 1fe:	28 9a       	sbi	0x05, 0	; 5
 200:	2a 9a       	sbi	0x05, 2	; 5
 202:	8a e6       	ldi	r24, 0x6A	; 106
 204:	8a 95       	dec	r24
 206:	f1 f7       	brne	.-4      	; 0x204 <LCDsendChar+0x2e>
 208:	00 c0       	rjmp	.+0      	; 0x20a <LCDsendChar+0x34>
 20a:	2a 98       	cbi	0x05, 2	; 5
 20c:	28 98       	cbi	0x05, 0	; 5
 20e:	9a e6       	ldi	r25, 0x6A	; 106
 210:	9a 95       	dec	r25
 212:	f1 f7       	brne	.-4      	; 0x210 <LCDsendChar+0x3a>
 214:	00 c0       	rjmp	.+0      	; 0x216 <LCDsendChar+0x40>
 216:	08 95       	ret

00000218 <LCDsendCommand>:
 218:	98 2f       	mov	r25, r24
 21a:	90 7f       	andi	r25, 0xF0	; 240
 21c:	95 b9       	out	0x05, r25	; 5
 21e:	2a 9a       	sbi	0x05, 2	; 5
 220:	ef ec       	ldi	r30, 0xCF	; 207
 222:	f7 e0       	ldi	r31, 0x07	; 7
 224:	31 97       	sbiw	r30, 0x01	; 1
 226:	f1 f7       	brne	.-4      	; 0x224 <LCDsendCommand+0xc>
 228:	00 c0       	rjmp	.+0      	; 0x22a <LCDsendCommand+0x12>
 22a:	00 00       	nop
 22c:	2a 98       	cbi	0x05, 2	; 5
 22e:	ef ec       	ldi	r30, 0xCF	; 207
 230:	f7 e0       	ldi	r31, 0x07	; 7
 232:	31 97       	sbiw	r30, 0x01	; 1
 234:	f1 f7       	brne	.-4      	; 0x232 <LCDsendCommand+0x1a>
 236:	00 c0       	rjmp	.+0      	; 0x238 <LCDsendCommand+0x20>
 238:	00 00       	nop
 23a:	f0 e1       	ldi	r31, 0x10	; 16
 23c:	8f 9f       	mul	r24, r31
 23e:	c0 01       	movw	r24, r0
 240:	11 24       	eor	r1, r1
 242:	85 b9       	out	0x05, r24	; 5
 244:	2a 9a       	sbi	0x05, 2	; 5
 246:	8f ec       	ldi	r24, 0xCF	; 207
 248:	97 e0       	ldi	r25, 0x07	; 7
 24a:	01 97       	sbiw	r24, 0x01	; 1
 24c:	f1 f7       	brne	.-4      	; 0x24a <LCDsendCommand+0x32>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <LCDsendCommand+0x38>
 250:	00 00       	nop
 252:	2a 98       	cbi	0x05, 2	; 5
 254:	ef ec       	ldi	r30, 0xCF	; 207
 256:	f7 e0       	ldi	r31, 0x07	; 7
 258:	31 97       	sbiw	r30, 0x01	; 1
 25a:	f1 f7       	brne	.-4      	; 0x258 <LCDsendCommand+0x40>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <LCDsendCommand+0x46>
 25e:	00 00       	nop
 260:	08 95       	ret

00000262 <LCDGotoXY>:
 262:	62 30       	cpi	r22, 0x02	; 2
 264:	31 f0       	breq	.+12     	; 0x272 <LCDGotoXY+0x10>
 266:	63 30       	cpi	r22, 0x03	; 3
 268:	31 f0       	breq	.+12     	; 0x276 <LCDGotoXY+0x14>
 26a:	61 30       	cpi	r22, 0x01	; 1
 26c:	29 f4       	brne	.+10     	; 0x278 <LCDGotoXY+0x16>
 26e:	80 5c       	subi	r24, 0xC0	; 192
 270:	03 c0       	rjmp	.+6      	; 0x278 <LCDGotoXY+0x16>
 272:	8c 5e       	subi	r24, 0xEC	; 236
 274:	01 c0       	rjmp	.+2      	; 0x278 <LCDGotoXY+0x16>
 276:	8c 5a       	subi	r24, 0xAC	; 172
 278:	80 68       	ori	r24, 0x80	; 128
 27a:	0e 94 0c 01 	call	0x218	; 0x218 <LCDsendCommand>
 27e:	08 95       	ret

00000280 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
 280:	ff 92       	push	r15
 282:	0f 93       	push	r16
 284:	1f 93       	push	r17
 286:	cf 93       	push	r28
 288:	df 93       	push	r29
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
 28a:	66 0f       	add	r22, r22
 28c:	66 0f       	add	r22, r22
 28e:	66 0f       	add	r22, r22
 290:	60 64       	ori	r22, 0x40	; 64
 292:	ec 01       	movw	r28, r24
 294:	68 94       	set
 296:	ff 24       	eor	r15, r15
 298:	f3 f8       	bld	r15, 3
 29a:	f6 0e       	add	r15, r22
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
 29c:	fe 01       	movw	r30, r28
 29e:	04 91       	lpm	r16, Z
		LCDsendCommand(a++);
 2a0:	11 e0       	ldi	r17, 0x01	; 1
 2a2:	16 0f       	add	r17, r22
 2a4:	86 2f       	mov	r24, r22
 2a6:	0e 94 0c 01 	call	0x218	; 0x218 <LCDsendCommand>
		LCDsendChar(pcc);
 2aa:	80 2f       	mov	r24, r16
 2ac:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCDsendChar>
 2b0:	21 96       	adiw	r28, 0x01	; 1
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
 2b2:	61 2f       	mov	r22, r17
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
 2b4:	1f 11       	cpse	r17, r15
 2b6:	f2 cf       	rjmp	.-28     	; 0x29c <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
 2b8:	df 91       	pop	r29
 2ba:	cf 91       	pop	r28
 2bc:	1f 91       	pop	r17
 2be:	0f 91       	pop	r16
 2c0:	ff 90       	pop	r15
 2c2:	08 95       	ret

000002c4 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
void LCDinit(void)//Initializes LCD
{
 2c4:	1f 93       	push	r17
 2c6:	cf 93       	push	r28
 2c8:	df 93       	push	r29
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ca:	8f e2       	ldi	r24, 0x2F	; 47
 2cc:	95 e7       	ldi	r25, 0x75	; 117
 2ce:	01 97       	sbiw	r24, 0x01	; 1
 2d0:	f1 f7       	brne	.-4      	; 0x2ce <LCDinit+0xa>
 2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <LCDinit+0x10>
 2d4:	00 00       	nop
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
 2d6:	15 b8       	out	0x05, r1	; 5
	LCP=0x00;
 2d8:	15 b8       	out	0x05, r1	; 5
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
 2da:	84 b1       	in	r24, 0x04	; 4
 2dc:	80 6f       	ori	r24, 0xF0	; 240
 2de:	84 b9       	out	0x04, r24	; 4
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
 2e0:	84 b1       	in	r24, 0x04	; 4
 2e2:	87 60       	ori	r24, 0x07	; 7
 2e4:	84 b9       	out	0x04, r24	; 4
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
 2e6:	80 e3       	ldi	r24, 0x30	; 48
 2e8:	85 b9       	out	0x05, r24	; 5
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 2ea:	2a 9a       	sbi	0x05, 2	; 5
 2ec:	ef ec       	ldi	r30, 0xCF	; 207
 2ee:	f7 e0       	ldi	r31, 0x07	; 7
 2f0:	31 97       	sbiw	r30, 0x01	; 1
 2f2:	f1 f7       	brne	.-4      	; 0x2f0 <LCDinit+0x2c>
 2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <LCDinit+0x32>
 2f6:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 2f8:	2a 98       	cbi	0x05, 2	; 5
 2fa:	ef ec       	ldi	r30, 0xCF	; 207
 2fc:	f7 e0       	ldi	r31, 0x07	; 7
 2fe:	31 97       	sbiw	r30, 0x01	; 1
 300:	f1 f7       	brne	.-4      	; 0x2fe <LCDinit+0x3a>
 302:	00 c0       	rjmp	.+0      	; 0x304 <LCDinit+0x40>
 304:	00 00       	nop
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
 306:	85 b9       	out	0x05, r24	; 5
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 308:	2a 9a       	sbi	0x05, 2	; 5
 30a:	8f ec       	ldi	r24, 0xCF	; 207
 30c:	97 e0       	ldi	r25, 0x07	; 7
 30e:	01 97       	sbiw	r24, 0x01	; 1
 310:	f1 f7       	brne	.-4      	; 0x30e <LCDinit+0x4a>
 312:	00 c0       	rjmp	.+0      	; 0x314 <LCDinit+0x50>
 314:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 316:	2a 98       	cbi	0x05, 2	; 5
 318:	ef ec       	ldi	r30, 0xCF	; 207
 31a:	f7 e0       	ldi	r31, 0x07	; 7
 31c:	31 97       	sbiw	r30, 0x01	; 1
 31e:	f1 f7       	brne	.-4      	; 0x31c <LCDinit+0x58>
 320:	00 c0       	rjmp	.+0      	; 0x322 <LCDinit+0x5e>
 322:	00 00       	nop
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
 324:	80 e2       	ldi	r24, 0x20	; 32
 326:	85 b9       	out	0x05, r24	; 5
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 328:	2a 9a       	sbi	0x05, 2	; 5
 32a:	8f ec       	ldi	r24, 0xCF	; 207
 32c:	97 e0       	ldi	r25, 0x07	; 7
 32e:	01 97       	sbiw	r24, 0x01	; 1
 330:	f1 f7       	brne	.-4      	; 0x32e <LCDinit+0x6a>
 332:	00 c0       	rjmp	.+0      	; 0x334 <LCDinit+0x70>
 334:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 336:	2a 98       	cbi	0x05, 2	; 5
 338:	ef ec       	ldi	r30, 0xCF	; 207
 33a:	f7 e0       	ldi	r31, 0x07	; 7
 33c:	31 97       	sbiw	r30, 0x01	; 1
 33e:	f1 f7       	brne	.-4      	; 0x33c <LCDinit+0x78>
 340:	00 c0       	rjmp	.+0      	; 0x342 <LCDinit+0x7e>
 342:	00 00       	nop
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
 344:	88 e2       	ldi	r24, 0x28	; 40
 346:	0e 94 0c 01 	call	0x218	; 0x218 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
 34a:	8c e0       	ldi	r24, 0x0C	; 12
 34c:	0e 94 0c 01 	call	0x218	; 0x218 <LCDsendCommand>
 350:	c8 e5       	ldi	r28, 0x58	; 88
 352:	d1 e0       	ldi	r29, 0x01	; 1
		//init 8 custom chars
	uint8_t ch=0, chn=0;
 354:	60 e0       	ldi	r22, 0x00	; 0
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
 356:	11 e0       	ldi	r17, 0x01	; 1
 358:	16 0f       	add	r17, r22
 35a:	ce 01       	movw	r24, r28
 35c:	0e 94 40 01 	call	0x280	; 0x280 <LCDdefinechar>
 360:	28 96       	adiw	r28, 0x08	; 8
 362:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
 364:	18 30       	cpi	r17, 0x08	; 8
 366:	b9 f7       	brne	.-18     	; 0x356 <LCDinit+0x92>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
 368:	df 91       	pop	r29
 36a:	cf 91       	pop	r28
 36c:	1f 91       	pop	r17
 36e:	08 95       	ret

00000370 <actualizar_salida>:
		case 0b11101101:key='=';break;
		case 0b11101110:key='+';break;
	}
	return key;
	
}
 370:	2b b1       	in	r18, 0x0b	; 11
 372:	30 e1       	ldi	r19, 0x10	; 16
 374:	83 9f       	mul	r24, r19
 376:	c0 01       	movw	r24, r0
 378:	11 24       	eor	r1, r1
 37a:	2f 70       	andi	r18, 0x0F	; 15
 37c:	82 2b       	or	r24, r18
 37e:	8b b9       	out	0x0b, r24	; 11
 380:	08 95       	ret

00000382 <teclado2>:
uint8_t teclado2(uint8_t lectura)
{
	uint8_t key=0;
	switch (lectura)
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	fc 01       	movw	r30, r24
 386:	e7 57       	subi	r30, 0x77	; 119
 388:	f1 09       	sbc	r31, r1
 38a:	e8 37       	cpi	r30, 0x78	; 120
 38c:	f1 05       	cpc	r31, r1
 38e:	20 f5       	brcc	.+72     	; 0x3d8 <teclado2+0x56>
 390:	ec 5c       	subi	r30, 0xCC	; 204
 392:	ff 4f       	sbci	r31, 0xFF	; 255
 394:	0c 94 5d 02 	jmp	0x4ba	; 0x4ba <__tablejump2__>
	{
		case 0b01110111:key='1';break;
 398:	81 e3       	ldi	r24, 0x31	; 49
 39a:	08 95       	ret
		case 0b01111011:key='2';break;
 39c:	82 e3       	ldi	r24, 0x32	; 50
 39e:	08 95       	ret
		case 0b01111101:key='3';break;
 3a0:	83 e3       	ldi	r24, 0x33	; 51
 3a2:	08 95       	ret
		case 0b01111110:key='A';break;
 3a4:	81 e4       	ldi	r24, 0x41	; 65
 3a6:	08 95       	ret
		
		case 0b10110111:key='4';break;
 3a8:	84 e3       	ldi	r24, 0x34	; 52
 3aa:	08 95       	ret
		case 0b10111011:key='5';;break;
 3ac:	85 e3       	ldi	r24, 0x35	; 53
 3ae:	08 95       	ret
		case 0b10111101:key='6';break;
 3b0:	86 e3       	ldi	r24, 0x36	; 54
 3b2:	08 95       	ret
		case 0b10111110:key='B';break;
 3b4:	82 e4       	ldi	r24, 0x42	; 66
 3b6:	08 95       	ret
		
		case 0b11010111:key='7';break;
 3b8:	87 e3       	ldi	r24, 0x37	; 55
 3ba:	08 95       	ret
		case 0b11011011:key='8';break;
 3bc:	88 e3       	ldi	r24, 0x38	; 56
 3be:	08 95       	ret
		case 0b11011101:key='9';break;
 3c0:	89 e3       	ldi	r24, 0x39	; 57
 3c2:	08 95       	ret
		case 0b11011110:key='C';break;
 3c4:	83 e4       	ldi	r24, 0x43	; 67
 3c6:	08 95       	ret
		
		case 0b11100111:key='*';break;
 3c8:	8a e2       	ldi	r24, 0x2A	; 42
 3ca:	08 95       	ret
		case 0b11101011:key='0';break;
 3cc:	80 e3       	ldi	r24, 0x30	; 48
 3ce:	08 95       	ret
		case 0b11101101:key='#';break;
 3d0:	83 e2       	ldi	r24, 0x23	; 35
 3d2:	08 95       	ret
		case 0b11101110:key='D';break;
 3d4:	84 e4       	ldi	r24, 0x44	; 68
 3d6:	08 95       	ret
	return key;
	
}
uint8_t teclado2(uint8_t lectura)
{
	uint8_t key=0;
 3d8:	80 e0       	ldi	r24, 0x00	; 0
		case 0b11101011:key='0';break;
		case 0b11101101:key='#';break;
		case 0b11101110:key='D';break;
	}
	return key;
}
 3da:	08 95       	ret

000003dc <KEYPAD_scan>:
uint8_t KEYPAD_scan(uint8_t *key)
{
 3dc:	cf 93       	push	r28
 3de:	df 93       	push	r29
 3e0:	ec 01       	movw	r28, r24
	DDR=0xF0;
 3e2:	80 ef       	ldi	r24, 0xF0	; 240
 3e4:	8a b9       	out	0x0a, r24	; 10
	puerto=0x0F;
 3e6:	8f e0       	ldi	r24, 0x0F	; 15
 3e8:	8b b9       	out	0x0b, r24	; 11
	actualizar_salida(0);
 3ea:	80 e0       	ldi	r24, 0x00	; 0
 3ec:	0e 94 b8 01 	call	0x370	; 0x370 <actualizar_salida>
{
	return (puerto>>4);
}
uint8_t get_entrada()
{
	return (puerto_lectura|0xF0);
 3f0:	89 b1       	in	r24, 0x09	; 9
{
	DDR=0xF0;
	puerto=0x0F;
	actualizar_salida(0);

	if(get_entrada()==0xFF){return 0;}
 3f2:	80 6f       	ori	r24, 0xF0	; 240
 3f4:	8f 3f       	cpi	r24, 0xFF	; 255
 3f6:	c9 f0       	breq	.+50     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
	actualizar_salida(0b00001110);
 3f8:	8e e0       	ldi	r24, 0x0E	; 14
 3fa:	0e 94 b8 01 	call	0x370	; 0x370 <actualizar_salida>
{
	return (puerto>>4);
}
uint8_t get_entrada()
{
	return (puerto_lectura|0xF0);
 3fe:	89 b1       	in	r24, 0x09	; 9
	uint8_t lectura=0;
	while(1)
	{
		//_delay_ms(100);
		//si en la entrada solo hay 1111 significa que es la fila incorrecta, por lo que se niega la condicion y se continua con la siguiente fila
		if(!(get_entrada()==0xFF))
 400:	80 6f       	ori	r24, 0xF0	; 240
 402:	8f 3f       	cpi	r24, 0xFF	; 255
 404:	31 f0       	breq	.+12     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
		{
			lectura=puerto_lectura;
 406:	89 b1       	in	r24, 0x09	; 9
			//*key=teclado1(lectura);
			*key=teclado2(lectura);	
 408:	0e 94 c1 01 	call	0x382	; 0x382 <teclado2>
 40c:	88 83       	st	Y, r24
			return 1;
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	0d c0       	rjmp	.+26     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
	// como la salida se encuentra en los bits mas significativos, se lo corre 4 veces y se le añade la entrada que debe de ser igual
	puerto= (salida<<4) | (puerto & 0x0F);
}
uint8_t get_salida()
{
	return (puerto>>4);
 412:	8b b1       	in	r24, 0x0b	; 11
			//*key=teclado1(lectura);
			*key=teclado2(lectura);	
			return 1;
		}
		//se realiza el corrimiento de los bits del puerto de salida, para probar la siguiente fila
		actualizar_salida((get_salida()<<1)+1);
 414:	82 95       	swap	r24
 416:	8f 70       	andi	r24, 0x0F	; 15
 418:	88 0f       	add	r24, r24
 41a:	8f 5f       	subi	r24, 0xFF	; 255
 41c:	0e 94 b8 01 	call	0x370	; 0x370 <actualizar_salida>
{
	return (puerto>>4);
}
uint8_t get_entrada()
{
	return (puerto_lectura|0xF0);
 420:	89 b1       	in	r24, 0x09	; 9
	uint8_t lectura=0;
	while(1)
	{
		//_delay_ms(100);
		//si en la entrada solo hay 1111 significa que es la fila incorrecta, por lo que se niega la condicion y se continua con la siguiente fila
		if(!(get_entrada()==0xFF))
 422:	80 6f       	ori	r24, 0xF0	; 240
 424:	8f 3f       	cpi	r24, 0xFF	; 255
 426:	a9 f3       	breq	.-22     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 428:	ee cf       	rjmp	.-36     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
{
	DDR=0xF0;
	puerto=0x0F;
	actualizar_salida(0);

	if(get_entrada()==0xFF){return 0;}
 42a:	80 e0       	ldi	r24, 0x00	; 0
		}
		//se realiza el corrimiento de los bits del puerto de salida, para probar la siguiente fila
		actualizar_salida((get_salida()<<1)+1);
	}
	return 0;
}
 42c:	df 91       	pop	r29
 42e:	cf 91       	pop	r28
 430:	08 95       	ret

00000432 <KEYPAD_Update>:
uint8_t KEYPAD_Update (uint8_t *pkey)
{
 432:	cf 93       	push	r28
 434:	df 93       	push	r29
 436:	ec 01       	movw	r28, r24
	static uint8_t Old_key,Key, Last_valid_key=0xFF; // no hay tecla presionada
	if(!KEYPAD_scan(&Key)) {
 438:	83 e0       	ldi	r24, 0x03	; 3
 43a:	91 e0       	ldi	r25, 0x01	; 1
 43c:	0e 94 ee 01 	call	0x3dc	; 0x3dc <KEYPAD_scan>
 440:	81 11       	cpse	r24, r1
 442:	06 c0       	rjmp	.+12     	; 0x450 <KEYPAD_Update+0x1e>
		Old_key=0xFF; // no hay tecla presionada
 444:	9f ef       	ldi	r25, 0xFF	; 255
 446:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__data_end>
		Last_valid_key=0xFF;
 44a:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__DATA_REGION_ORIGIN__>
		return 0;
 44e:	14 c0       	rjmp	.+40     	; 0x478 <KEYPAD_Update+0x46>
	}
	if(Key==Old_key) { //2da verificación
 450:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <Key.1834>
 454:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__data_end>
 458:	89 13       	cpse	r24, r25
 45a:	0b c0       	rjmp	.+22     	; 0x472 <KEYPAD_Update+0x40>
		if(Key!=Last_valid_key){ //evita múltiple detección
 45c:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 460:	89 17       	cp	r24, r25
 462:	39 f0       	breq	.+14     	; 0x472 <KEYPAD_Update+0x40>
			*pkey=Key;
 464:	88 83       	st	Y, r24
			Last_valid_key = Key;
 466:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <Key.1834>
 46a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			return 1;
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	03 c0       	rjmp	.+6      	; 0x478 <KEYPAD_Update+0x46>
		}
	}
	Old_key=Key; //1era verificación
 472:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
	return 0;
 476:	80 e0       	ldi	r24, 0x00	; 0
}
 478:	df 91       	pop	r29
 47a:	cf 91       	pop	r28
 47c:	08 95       	ret

0000047e <testeo_del_teclado>:

//este test de funcionamiento del teclado es para probarlo con el proteus, con un keypad-smallcalc modificado y con un LCD LM016L
void testeo_del_teclado()
{
 47e:	cf 93       	push	r28
 480:	df 93       	push	r29
 482:	1f 92       	push	r1
 484:	cd b7       	in	r28, 0x3d	; 61
 486:	de b7       	in	r29, 0x3e	; 62
		LCDinit();
 488:	0e 94 62 01 	call	0x2c4	; 0x2c4 <LCDinit>
		LCDGotoXY(0,0);
 48c:	60 e0       	ldi	r22, 0x00	; 0
 48e:	80 e0       	ldi	r24, 0x00	; 0
 490:	0e 94 31 01 	call	0x262	; 0x262 <LCDGotoXY>
		while (1)
		{
			uint8_t tecla=0;
 494:	19 82       	std	Y+1, r1	; 0x01
			//programa de testeo del KEYPAD_scan
			if(KEYPAD_Update(&tecla)){
 496:	ce 01       	movw	r24, r28
 498:	01 96       	adiw	r24, 0x01	; 1
 49a:	0e 94 19 02 	call	0x432	; 0x432 <KEYPAD_Update>
 49e:	88 23       	and	r24, r24
 4a0:	19 f0       	breq	.+6      	; 0x4a8 <testeo_del_teclado+0x2a>
				LCDsendChar(tecla);
 4a2:	89 81       	ldd	r24, Y+1	; 0x01
 4a4:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCDsendChar>
 4a8:	8f e1       	ldi	r24, 0x1F	; 31
 4aa:	9e e4       	ldi	r25, 0x4E	; 78
 4ac:	01 97       	sbiw	r24, 0x01	; 1
 4ae:	f1 f7       	brne	.-4      	; 0x4ac <testeo_del_teclado+0x2e>
 4b0:	00 c0       	rjmp	.+0      	; 0x4b2 <testeo_del_teclado+0x34>
 4b2:	00 00       	nop
			}
			_delay_ms(10);
		}
 4b4:	ef cf       	rjmp	.-34     	; 0x494 <testeo_del_teclado+0x16>

000004b6 <main>:
}

int main(void)
{
	testeo_del_teclado();
 4b6:	0e 94 3f 02 	call	0x47e	; 0x47e <testeo_del_teclado>

000004ba <__tablejump2__>:
 4ba:	ee 0f       	add	r30, r30
 4bc:	ff 1f       	adc	r31, r31
 4be:	05 90       	lpm	r0, Z+
 4c0:	f4 91       	lpm	r31, Z
 4c2:	e0 2d       	mov	r30, r0
 4c4:	09 94       	ijmp

000004c6 <_exit>:
 4c6:	f8 94       	cli

000004c8 <__stop_program>:
 4c8:	ff cf       	rjmp	.-2      	; 0x4c8 <__stop_program>
