
Cerradura_electronica.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000306  0000037a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000306  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000382  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001201  00000000  00000000  000004d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008a7  00000000  00000000  000016d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007b8  00000000  00000000  00001f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000026c  00000000  00000000  00002734  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000547  00000000  00000000  000029a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000edb  00000000  00000000  00002ee7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  00003dc2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__ctors_end>
   4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  30:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  48:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  54:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  5c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000068 <LcdCustomChar>:
  68:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
  78:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
  88:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
  98:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000000a8 <__ctors_end>:
  a8:	11 24       	eor	r1, r1
  aa:	1f be       	out	0x3f, r1	; 63
  ac:	cf ef       	ldi	r28, 0xFF	; 255
  ae:	d8 e0       	ldi	r29, 0x08	; 8
  b0:	de bf       	out	0x3e, r29	; 62
  b2:	cd bf       	out	0x3d, r28	; 61

000000b4 <__do_copy_data>:
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	a0 e0       	ldi	r26, 0x00	; 0
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	e6 e0       	ldi	r30, 0x06	; 6
  bc:	f3 e0       	ldi	r31, 0x03	; 3
  be:	02 c0       	rjmp	.+4      	; 0xc4 <__do_copy_data+0x10>
  c0:	05 90       	lpm	r0, Z+
  c2:	0d 92       	st	X+, r0
  c4:	a8 30       	cpi	r26, 0x08	; 8
  c6:	b1 07       	cpc	r27, r17
  c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0xc>
  ca:	0e 94 78 01 	call	0x2f0	; 0x2f0 <main>
  ce:	0c 94 81 01 	jmp	0x302	; 0x302 <_exit>

000000d2 <__bad_interrupt>:
  d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <LCDsendChar>:
	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
	}
}
  d6:	98 2f       	mov	r25, r24
  d8:	90 7f       	andi	r25, 0xF0	; 240
  da:	95 b9       	out	0x05, r25	; 5
  dc:	28 9a       	sbi	0x05, 0	; 5
  de:	2a 9a       	sbi	0x05, 2	; 5
  e0:	2a e6       	ldi	r18, 0x6A	; 106
  e2:	2a 95       	dec	r18
  e4:	f1 f7       	brne	.-4      	; 0xe2 <LCDsendChar+0xc>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <LCDsendChar+0x12>
  e8:	2a 98       	cbi	0x05, 2	; 5
  ea:	28 98       	cbi	0x05, 0	; 5
  ec:	9a e6       	ldi	r25, 0x6A	; 106
  ee:	9a 95       	dec	r25
  f0:	f1 f7       	brne	.-4      	; 0xee <LCDsendChar+0x18>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <LCDsendChar+0x1e>
  f4:	20 e1       	ldi	r18, 0x10	; 16
  f6:	82 9f       	mul	r24, r18
  f8:	c0 01       	movw	r24, r0
  fa:	11 24       	eor	r1, r1
  fc:	85 b9       	out	0x05, r24	; 5
  fe:	28 9a       	sbi	0x05, 0	; 5
 100:	2a 9a       	sbi	0x05, 2	; 5
 102:	8a e6       	ldi	r24, 0x6A	; 106
 104:	8a 95       	dec	r24
 106:	f1 f7       	brne	.-4      	; 0x104 <LCDsendChar+0x2e>
 108:	00 c0       	rjmp	.+0      	; 0x10a <LCDsendChar+0x34>
 10a:	2a 98       	cbi	0x05, 2	; 5
 10c:	28 98       	cbi	0x05, 0	; 5
 10e:	9a e6       	ldi	r25, 0x6A	; 106
 110:	9a 95       	dec	r25
 112:	f1 f7       	brne	.-4      	; 0x110 <LCDsendChar+0x3a>
 114:	00 c0       	rjmp	.+0      	; 0x116 <LCDsendChar+0x40>
 116:	08 95       	ret

00000118 <LCDsendCommand>:
 118:	98 2f       	mov	r25, r24
 11a:	90 7f       	andi	r25, 0xF0	; 240
 11c:	95 b9       	out	0x05, r25	; 5
 11e:	2a 9a       	sbi	0x05, 2	; 5
 120:	ef ec       	ldi	r30, 0xCF	; 207
 122:	f7 e0       	ldi	r31, 0x07	; 7
 124:	31 97       	sbiw	r30, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <LCDsendCommand+0xc>
 128:	00 c0       	rjmp	.+0      	; 0x12a <LCDsendCommand+0x12>
 12a:	00 00       	nop
 12c:	2a 98       	cbi	0x05, 2	; 5
 12e:	ef ec       	ldi	r30, 0xCF	; 207
 130:	f7 e0       	ldi	r31, 0x07	; 7
 132:	31 97       	sbiw	r30, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <LCDsendCommand+0x1a>
 136:	00 c0       	rjmp	.+0      	; 0x138 <LCDsendCommand+0x20>
 138:	00 00       	nop
 13a:	f0 e1       	ldi	r31, 0x10	; 16
 13c:	8f 9f       	mul	r24, r31
 13e:	c0 01       	movw	r24, r0
 140:	11 24       	eor	r1, r1
 142:	85 b9       	out	0x05, r24	; 5
 144:	2a 9a       	sbi	0x05, 2	; 5
 146:	8f ec       	ldi	r24, 0xCF	; 207
 148:	97 e0       	ldi	r25, 0x07	; 7
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <LCDsendCommand+0x32>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <LCDsendCommand+0x38>
 150:	00 00       	nop
 152:	2a 98       	cbi	0x05, 2	; 5
 154:	ef ec       	ldi	r30, 0xCF	; 207
 156:	f7 e0       	ldi	r31, 0x07	; 7
 158:	31 97       	sbiw	r30, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <LCDsendCommand+0x40>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <LCDsendCommand+0x46>
 15e:	00 00       	nop
 160:	08 95       	ret

00000162 <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
 162:	62 30       	cpi	r22, 0x02	; 2
 164:	31 f0       	breq	.+12     	; 0x172 <LCDGotoXY+0x10>
 166:	63 30       	cpi	r22, 0x03	; 3
 168:	31 f0       	breq	.+12     	; 0x176 <LCDGotoXY+0x14>
 16a:	61 30       	cpi	r22, 0x01	; 1
 16c:	29 f4       	brne	.+10     	; 0x178 <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
 16e:	80 5c       	subi	r24, 0xC0	; 192
 170:	03 c0       	rjmp	.+6      	; 0x178 <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
 172:	8c 5e       	subi	r24, 0xEC	; 236
 174:	01 c0       	rjmp	.+2      	; 0x178 <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
 176:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
 178:	80 68       	ori	r24, 0x80	; 128
 17a:	0e 94 8c 00 	call	0x118	; 0x118 <LCDsendCommand>
 17e:	08 95       	ret

00000180 <CopyStringtoLCD>:
}
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
 180:	0f 93       	push	r16
 182:	1f 93       	push	r17
 184:	cf 93       	push	r28
 186:	8c 01       	movw	r16, r24
 188:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
 18a:	64 2f       	mov	r22, r20
 18c:	0e 94 b1 00 	call	0x162	; 0x162 <LCDGotoXY>
	for(i=0;i<(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
 190:	c8 01       	movw	r24, r16
 192:	f8 01       	movw	r30, r16
 194:	24 91       	lpm	r18, Z
 196:	22 23       	and	r18, r18
 198:	69 f0       	breq	.+26     	; 0x1b4 <CopyStringtoLCD+0x34>
 19a:	c0 e0       	ldi	r28, 0x00	; 0
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
 19c:	fc 01       	movw	r30, r24
 19e:	84 91       	lpm	r24, Z
 1a0:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;i<(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
 1a4:	cf 5f       	subi	r28, 0xFF	; 255
 1a6:	c8 01       	movw	r24, r16
 1a8:	8c 0f       	add	r24, r28
 1aa:	91 1d       	adc	r25, r1
 1ac:	fc 01       	movw	r30, r24
 1ae:	24 91       	lpm	r18, Z
 1b0:	c2 17       	cp	r28, r18
 1b2:	a0 f3       	brcs	.-24     	; 0x19c <CopyStringtoLCD+0x1c>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
 1b4:	cf 91       	pop	r28
 1b6:	1f 91       	pop	r17
 1b8:	0f 91       	pop	r16
 1ba:	08 95       	ret

000001bc <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
 1bc:	ff 92       	push	r15
 1be:	0f 93       	push	r16
 1c0:	1f 93       	push	r17
 1c2:	cf 93       	push	r28
 1c4:	df 93       	push	r29
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
 1c6:	66 0f       	add	r22, r22
 1c8:	66 0f       	add	r22, r22
 1ca:	66 0f       	add	r22, r22
 1cc:	60 64       	ori	r22, 0x40	; 64
 1ce:	ec 01       	movw	r28, r24
 1d0:	68 94       	set
 1d2:	ff 24       	eor	r15, r15
 1d4:	f3 f8       	bld	r15, 3
 1d6:	f6 0e       	add	r15, r22
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
 1d8:	fe 01       	movw	r30, r28
 1da:	04 91       	lpm	r16, Z
		LCDsendCommand(a++);
 1dc:	11 e0       	ldi	r17, 0x01	; 1
 1de:	16 0f       	add	r17, r22
 1e0:	86 2f       	mov	r24, r22
 1e2:	0e 94 8c 00 	call	0x118	; 0x118 <LCDsendCommand>
		LCDsendChar(pcc);
 1e6:	80 2f       	mov	r24, r16
 1e8:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCDsendChar>
 1ec:	21 96       	adiw	r28, 0x01	; 1
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
 1ee:	61 2f       	mov	r22, r17
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
 1f0:	1f 11       	cpse	r17, r15
 1f2:	f2 cf       	rjmp	.-28     	; 0x1d8 <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	1f 91       	pop	r17
 1fa:	0f 91       	pop	r16
 1fc:	ff 90       	pop	r15
 1fe:	08 95       	ret

00000200 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
void LCDinit(void)//Initializes LCD
{
 200:	1f 93       	push	r17
 202:	cf 93       	push	r28
 204:	df 93       	push	r29
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 206:	8f e2       	ldi	r24, 0x2F	; 47
 208:	95 e7       	ldi	r25, 0x75	; 117
 20a:	01 97       	sbiw	r24, 0x01	; 1
 20c:	f1 f7       	brne	.-4      	; 0x20a <LCDinit+0xa>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <LCDinit+0x10>
 210:	00 00       	nop
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
 212:	15 b8       	out	0x05, r1	; 5
	LCP=0x00;
 214:	15 b8       	out	0x05, r1	; 5
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
 216:	84 b1       	in	r24, 0x04	; 4
 218:	80 6f       	ori	r24, 0xF0	; 240
 21a:	84 b9       	out	0x04, r24	; 4
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
 21c:	84 b1       	in	r24, 0x04	; 4
 21e:	87 60       	ori	r24, 0x07	; 7
 220:	84 b9       	out	0x04, r24	; 4
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
 222:	80 e3       	ldi	r24, 0x30	; 48
 224:	85 b9       	out	0x05, r24	; 5
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 226:	2a 9a       	sbi	0x05, 2	; 5
 228:	ef ec       	ldi	r30, 0xCF	; 207
 22a:	f7 e0       	ldi	r31, 0x07	; 7
 22c:	31 97       	sbiw	r30, 0x01	; 1
 22e:	f1 f7       	brne	.-4      	; 0x22c <LCDinit+0x2c>
 230:	00 c0       	rjmp	.+0      	; 0x232 <LCDinit+0x32>
 232:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 234:	2a 98       	cbi	0x05, 2	; 5
 236:	ef ec       	ldi	r30, 0xCF	; 207
 238:	f7 e0       	ldi	r31, 0x07	; 7
 23a:	31 97       	sbiw	r30, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <LCDinit+0x3a>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <LCDinit+0x40>
 240:	00 00       	nop
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
 242:	85 b9       	out	0x05, r24	; 5
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 244:	2a 9a       	sbi	0x05, 2	; 5
 246:	8f ec       	ldi	r24, 0xCF	; 207
 248:	97 e0       	ldi	r25, 0x07	; 7
 24a:	01 97       	sbiw	r24, 0x01	; 1
 24c:	f1 f7       	brne	.-4      	; 0x24a <LCDinit+0x4a>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <LCDinit+0x50>
 250:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 252:	2a 98       	cbi	0x05, 2	; 5
 254:	ef ec       	ldi	r30, 0xCF	; 207
 256:	f7 e0       	ldi	r31, 0x07	; 7
 258:	31 97       	sbiw	r30, 0x01	; 1
 25a:	f1 f7       	brne	.-4      	; 0x258 <LCDinit+0x58>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <LCDinit+0x5e>
 25e:	00 00       	nop
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
 260:	80 e2       	ldi	r24, 0x20	; 32
 262:	85 b9       	out	0x05, r24	; 5
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 264:	2a 9a       	sbi	0x05, 2	; 5
 266:	8f ec       	ldi	r24, 0xCF	; 207
 268:	97 e0       	ldi	r25, 0x07	; 7
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <LCDinit+0x6a>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <LCDinit+0x70>
 270:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 272:	2a 98       	cbi	0x05, 2	; 5
 274:	ef ec       	ldi	r30, 0xCF	; 207
 276:	f7 e0       	ldi	r31, 0x07	; 7
 278:	31 97       	sbiw	r30, 0x01	; 1
 27a:	f1 f7       	brne	.-4      	; 0x278 <LCDinit+0x78>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <LCDinit+0x7e>
 27e:	00 00       	nop
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
 280:	88 e2       	ldi	r24, 0x28	; 40
 282:	0e 94 8c 00 	call	0x118	; 0x118 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
 286:	8c e0       	ldi	r24, 0x0C	; 12
 288:	0e 94 8c 00 	call	0x118	; 0x118 <LCDsendCommand>
 28c:	c8 e6       	ldi	r28, 0x68	; 104
 28e:	d0 e0       	ldi	r29, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
 290:	60 e0       	ldi	r22, 0x00	; 0
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
 292:	11 e0       	ldi	r17, 0x01	; 1
 294:	16 0f       	add	r17, r22
 296:	ce 01       	movw	r24, r28
 298:	0e 94 de 00 	call	0x1bc	; 0x1bc <LCDdefinechar>
 29c:	28 96       	adiw	r28, 0x08	; 8
 29e:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
 2a0:	18 30       	cpi	r17, 0x08	; 8
 2a2:	b9 f7       	brne	.-18     	; 0x292 <LCDinit+0x92>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
 2a4:	df 91       	pop	r29
 2a6:	cf 91       	pop	r28
 2a8:	1f 91       	pop	r17
 2aa:	08 95       	ret

000002ac <muestreoInicial>:
#include "lcd.h"
#include <time.h>
#include <util/delay.h>

void muestreoInicial(  ) //muestra en el display el valor por defecto -> en la primera linea la hora y en la segunta "cerrado"
{ 
 2ac:	cf 93       	push	r28
 2ae:	df 93       	push	r29
 2b0:	cd b7       	in	r28, 0x3d	; 61
 2b2:	de b7       	in	r29, 0x3e	; 62
 2b4:	27 97       	sbiw	r28, 0x07	; 7
 2b6:	0f b6       	in	r0, 0x3f	; 63
 2b8:	f8 94       	cli
 2ba:	de bf       	out	0x3e, r29	; 62
 2bc:	0f be       	out	0x3f, r0	; 63
 2be:	cd bf       	out	0x3d, r28	; 61
	uint8_t locked[7] = "CERRADO";//{'c','e','r','r','a','d','o'}; //crea un string con la palabra cerrado
 2c0:	87 e0       	ldi	r24, 0x07	; 7
 2c2:	e0 e0       	ldi	r30, 0x00	; 0
 2c4:	f1 e0       	ldi	r31, 0x01	; 1
 2c6:	de 01       	movw	r26, r28
 2c8:	11 96       	adiw	r26, 0x01	; 1
 2ca:	01 90       	ld	r0, Z+
 2cc:	0d 92       	st	X+, r0
 2ce:	8a 95       	dec	r24
 2d0:	e1 f7       	brne	.-8      	; 0x2ca <muestreoInicial+0x1e>
	CopyStringtoLCD(locked, 0, 1); //muestra cerrado en la linea 2 del display
 2d2:	41 e0       	ldi	r20, 0x01	; 1
 2d4:	60 e0       	ldi	r22, 0x00	; 0
 2d6:	ce 01       	movw	r24, r28
 2d8:	01 96       	adiw	r24, 0x01	; 1
 2da:	0e 94 c0 00 	call	0x180	; 0x180 <CopyStringtoLCD>
	//time_t t = time(NULL); //crea una variable tiempo
	//struct tm *tm = localtime(&t); //se le da el tiempo actual
	//char tiempo[64]; //variable para almacenar el tiempo como string
	//strftime(tiempo, sizeof(tiempo), "%c", tm); //guarda en el string tiempo lo que hay en tm
	//CopyStringtoLCD(&tiempo[0], 0, 1);
}
 2de:	27 96       	adiw	r28, 0x07	; 7
 2e0:	0f b6       	in	r0, 0x3f	; 63
 2e2:	f8 94       	cli
 2e4:	de bf       	out	0x3e, r29	; 62
 2e6:	0f be       	out	0x3f, r0	; 63
 2e8:	cd bf       	out	0x3d, r28	; 61
 2ea:	df 91       	pop	r29
 2ec:	cf 91       	pop	r28
 2ee:	08 95       	ret

000002f0 <main>:
int main(void)
{
	LCDinit(); //se inicializa el display
 2f0:	0e 94 00 01 	call	0x200	; 0x200 <LCDinit>
	LCDGotoXY(0,0);
 2f4:	60 e0       	ldi	r22, 0x00	; 0
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	0e 94 b1 00 	call	0x162	; 0x162 <LCDGotoXY>
	muestreoInicial();
 2fc:	0e 94 56 01 	call	0x2ac	; 0x2ac <muestreoInicial>
 300:	ff cf       	rjmp	.-2      	; 0x300 <main+0x10>

00000302 <_exit>:
 302:	f8 94       	cli

00000304 <__stop_program>:
 304:	ff cf       	rjmp	.-2      	; 0x304 <__stop_program>
