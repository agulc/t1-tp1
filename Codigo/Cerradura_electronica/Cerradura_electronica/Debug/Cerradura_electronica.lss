
Cerradura_electronica.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000504  00000598  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000504  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  0000059a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000059a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  0000060c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013d7  00000000  00000000  0000070c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009aa  00000000  00000000  00001ae3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a8e  00000000  00000000  0000248d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c4  00000000  00000000  00002f1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ac  00000000  00000000  000031e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010f5  00000000  00000000  0000378c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00004881  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 cc 00 	jmp	0x198	; 0x198 <__ctors_end>
   4:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
   8:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
   c:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
  10:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
  14:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
  18:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
  1c:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
  20:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
  24:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
  28:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
  2c:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
  30:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
  34:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
  38:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
  3c:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
  40:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
  44:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
  48:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
  4c:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
  50:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
  54:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
  58:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
  5c:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
  60:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
  64:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
  68:	e6 01       	movw	r28, r12
  6a:	34 02       	muls	r19, r20
  6c:	34 02       	muls	r19, r20
  6e:	34 02       	muls	r19, r20
  70:	ea 01       	movw	r28, r20
  72:	34 02       	muls	r19, r20
  74:	ee 01       	movw	r28, r28
  76:	f2 01       	movw	r30, r4
  78:	34 02       	muls	r19, r20
  7a:	34 02       	muls	r19, r20
  7c:	34 02       	muls	r19, r20
  7e:	34 02       	muls	r19, r20
  80:	34 02       	muls	r19, r20
  82:	34 02       	muls	r19, r20
  84:	34 02       	muls	r19, r20
  86:	34 02       	muls	r19, r20
  88:	34 02       	muls	r19, r20
  8a:	34 02       	muls	r19, r20
  8c:	34 02       	muls	r19, r20
  8e:	34 02       	muls	r19, r20
  90:	34 02       	muls	r19, r20
  92:	34 02       	muls	r19, r20
  94:	34 02       	muls	r19, r20
  96:	34 02       	muls	r19, r20
  98:	34 02       	muls	r19, r20
  9a:	34 02       	muls	r19, r20
  9c:	34 02       	muls	r19, r20
  9e:	34 02       	muls	r19, r20
  a0:	34 02       	muls	r19, r20
  a2:	34 02       	muls	r19, r20
  a4:	34 02       	muls	r19, r20
  a6:	34 02       	muls	r19, r20
  a8:	34 02       	muls	r19, r20
  aa:	34 02       	muls	r19, r20
  ac:	34 02       	muls	r19, r20
  ae:	34 02       	muls	r19, r20
  b0:	34 02       	muls	r19, r20
  b2:	34 02       	muls	r19, r20
  b4:	34 02       	muls	r19, r20
  b6:	34 02       	muls	r19, r20
  b8:	34 02       	muls	r19, r20
  ba:	34 02       	muls	r19, r20
  bc:	34 02       	muls	r19, r20
  be:	34 02       	muls	r19, r20
  c0:	34 02       	muls	r19, r20
  c2:	34 02       	muls	r19, r20
  c4:	34 02       	muls	r19, r20
  c6:	34 02       	muls	r19, r20
  c8:	34 02       	muls	r19, r20
  ca:	34 02       	muls	r19, r20
  cc:	34 02       	muls	r19, r20
  ce:	34 02       	muls	r19, r20
  d0:	34 02       	muls	r19, r20
  d2:	34 02       	muls	r19, r20
  d4:	34 02       	muls	r19, r20
  d6:	34 02       	muls	r19, r20
  d8:	34 02       	muls	r19, r20
  da:	34 02       	muls	r19, r20
  dc:	34 02       	muls	r19, r20
  de:	34 02       	muls	r19, r20
  e0:	34 02       	muls	r19, r20
  e2:	34 02       	muls	r19, r20
  e4:	34 02       	muls	r19, r20
  e6:	34 02       	muls	r19, r20
  e8:	f6 01       	movw	r30, r12
  ea:	34 02       	muls	r19, r20
  ec:	34 02       	muls	r19, r20
  ee:	34 02       	muls	r19, r20
  f0:	fa 01       	movw	r30, r20
  f2:	34 02       	muls	r19, r20
  f4:	fe 01       	movw	r30, r28
  f6:	02 02       	muls	r16, r18
  f8:	34 02       	muls	r19, r20
  fa:	34 02       	muls	r19, r20
  fc:	34 02       	muls	r19, r20
  fe:	34 02       	muls	r19, r20
 100:	34 02       	muls	r19, r20
 102:	34 02       	muls	r19, r20
 104:	34 02       	muls	r19, r20
 106:	34 02       	muls	r19, r20
 108:	34 02       	muls	r19, r20
 10a:	34 02       	muls	r19, r20
 10c:	34 02       	muls	r19, r20
 10e:	34 02       	muls	r19, r20
 110:	34 02       	muls	r19, r20
 112:	34 02       	muls	r19, r20
 114:	34 02       	muls	r19, r20
 116:	34 02       	muls	r19, r20
 118:	34 02       	muls	r19, r20
 11a:	34 02       	muls	r19, r20
 11c:	34 02       	muls	r19, r20
 11e:	34 02       	muls	r19, r20
 120:	34 02       	muls	r19, r20
 122:	34 02       	muls	r19, r20
 124:	34 02       	muls	r19, r20
 126:	34 02       	muls	r19, r20
 128:	06 02       	muls	r16, r22
 12a:	34 02       	muls	r19, r20
 12c:	34 02       	muls	r19, r20
 12e:	34 02       	muls	r19, r20
 130:	0a 02       	muls	r16, r26
 132:	34 02       	muls	r19, r20
 134:	0e 02       	muls	r16, r30
 136:	12 02       	muls	r17, r18
 138:	34 02       	muls	r19, r20
 13a:	34 02       	muls	r19, r20
 13c:	34 02       	muls	r19, r20
 13e:	34 02       	muls	r19, r20
 140:	34 02       	muls	r19, r20
 142:	34 02       	muls	r19, r20
 144:	34 02       	muls	r19, r20
 146:	34 02       	muls	r19, r20
 148:	16 02       	muls	r17, r22
 14a:	34 02       	muls	r19, r20
 14c:	34 02       	muls	r19, r20
 14e:	34 02       	muls	r19, r20
 150:	1a 02       	muls	r17, r26
 152:	34 02       	muls	r19, r20
 154:	1e 02       	muls	r17, r30
 156:	22 02       	muls	r18, r18

00000158 <LcdCustomChar>:
 158:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
 168:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
 178:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
 188:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

00000198 <__ctors_end>:
 198:	11 24       	eor	r1, r1
 19a:	1f be       	out	0x3f, r1	; 63
 19c:	cf ef       	ldi	r28, 0xFF	; 255
 19e:	d8 e0       	ldi	r29, 0x08	; 8
 1a0:	de bf       	out	0x3e, r29	; 62
 1a2:	cd bf       	out	0x3d, r28	; 61

000001a4 <__do_copy_data>:
 1a4:	11 e0       	ldi	r17, 0x01	; 1
 1a6:	a0 e0       	ldi	r26, 0x00	; 0
 1a8:	b1 e0       	ldi	r27, 0x01	; 1
 1aa:	e4 e0       	ldi	r30, 0x04	; 4
 1ac:	f5 e0       	ldi	r31, 0x05	; 5
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <__do_copy_data+0x10>
 1b0:	05 90       	lpm	r0, Z+
 1b2:	0d 92       	st	X+, r0
 1b4:	a2 30       	cpi	r26, 0x02	; 2
 1b6:	b1 07       	cpc	r27, r17
 1b8:	d9 f7       	brne	.-10     	; 0x1b0 <__do_copy_data+0xc>

000001ba <__do_clear_bss>:
 1ba:	21 e0       	ldi	r18, 0x01	; 1
 1bc:	a2 e0       	ldi	r26, 0x02	; 2
 1be:	b1 e0       	ldi	r27, 0x01	; 1
 1c0:	01 c0       	rjmp	.+2      	; 0x1c4 <.do_clear_bss_start>

000001c2 <.do_clear_bss_loop>:
 1c2:	1d 92       	st	X+, r1

000001c4 <.do_clear_bss_start>:
 1c4:	a4 30       	cpi	r26, 0x04	; 4
 1c6:	b2 07       	cpc	r27, r18
 1c8:	e1 f7       	brne	.-8      	; 0x1c2 <.do_clear_bss_loop>
 1ca:	0e 94 5e 02 	call	0x4bc	; 0x4bc <main>
 1ce:	0c 94 80 02 	jmp	0x500	; 0x500 <_exit>

000001d2 <__bad_interrupt>:
 1d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001d6 <LCDsendChar>:
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
 1d6:	98 2f       	mov	r25, r24
 1d8:	90 7f       	andi	r25, 0xF0	; 240
 1da:	95 b9       	out	0x05, r25	; 5
 1dc:	28 9a       	sbi	0x05, 0	; 5
 1de:	2a 9a       	sbi	0x05, 2	; 5
 1e0:	2a e6       	ldi	r18, 0x6A	; 106
 1e2:	2a 95       	dec	r18
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <LCDsendChar+0xc>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <LCDsendChar+0x12>
 1e8:	2a 98       	cbi	0x05, 2	; 5
 1ea:	28 98       	cbi	0x05, 0	; 5
 1ec:	9a e6       	ldi	r25, 0x6A	; 106
 1ee:	9a 95       	dec	r25
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <LCDsendChar+0x18>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <LCDsendChar+0x1e>
 1f4:	20 e1       	ldi	r18, 0x10	; 16
 1f6:	82 9f       	mul	r24, r18
 1f8:	c0 01       	movw	r24, r0
 1fa:	11 24       	eor	r1, r1
 1fc:	85 b9       	out	0x05, r24	; 5
 1fe:	28 9a       	sbi	0x05, 0	; 5
 200:	2a 9a       	sbi	0x05, 2	; 5
 202:	8a e6       	ldi	r24, 0x6A	; 106
 204:	8a 95       	dec	r24
 206:	f1 f7       	brne	.-4      	; 0x204 <LCDsendChar+0x2e>
 208:	00 c0       	rjmp	.+0      	; 0x20a <LCDsendChar+0x34>
 20a:	2a 98       	cbi	0x05, 2	; 5
 20c:	28 98       	cbi	0x05, 0	; 5
 20e:	9a e6       	ldi	r25, 0x6A	; 106
 210:	9a 95       	dec	r25
 212:	f1 f7       	brne	.-4      	; 0x210 <LCDsendChar+0x3a>
 214:	00 c0       	rjmp	.+0      	; 0x216 <LCDsendChar+0x40>
 216:	08 95       	ret

00000218 <LCDsendCommand>:
 218:	98 2f       	mov	r25, r24
 21a:	90 7f       	andi	r25, 0xF0	; 240
 21c:	95 b9       	out	0x05, r25	; 5
 21e:	2a 9a       	sbi	0x05, 2	; 5
 220:	ef ec       	ldi	r30, 0xCF	; 207
 222:	f7 e0       	ldi	r31, 0x07	; 7
 224:	31 97       	sbiw	r30, 0x01	; 1
 226:	f1 f7       	brne	.-4      	; 0x224 <LCDsendCommand+0xc>
 228:	00 c0       	rjmp	.+0      	; 0x22a <LCDsendCommand+0x12>
 22a:	00 00       	nop
 22c:	2a 98       	cbi	0x05, 2	; 5
 22e:	ef ec       	ldi	r30, 0xCF	; 207
 230:	f7 e0       	ldi	r31, 0x07	; 7
 232:	31 97       	sbiw	r30, 0x01	; 1
 234:	f1 f7       	brne	.-4      	; 0x232 <LCDsendCommand+0x1a>
 236:	00 c0       	rjmp	.+0      	; 0x238 <LCDsendCommand+0x20>
 238:	00 00       	nop
 23a:	f0 e1       	ldi	r31, 0x10	; 16
 23c:	8f 9f       	mul	r24, r31
 23e:	c0 01       	movw	r24, r0
 240:	11 24       	eor	r1, r1
 242:	85 b9       	out	0x05, r24	; 5
 244:	2a 9a       	sbi	0x05, 2	; 5
 246:	8f ec       	ldi	r24, 0xCF	; 207
 248:	97 e0       	ldi	r25, 0x07	; 7
 24a:	01 97       	sbiw	r24, 0x01	; 1
 24c:	f1 f7       	brne	.-4      	; 0x24a <LCDsendCommand+0x32>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <LCDsendCommand+0x38>
 250:	00 00       	nop
 252:	2a 98       	cbi	0x05, 2	; 5
 254:	ef ec       	ldi	r30, 0xCF	; 207
 256:	f7 e0       	ldi	r31, 0x07	; 7
 258:	31 97       	sbiw	r30, 0x01	; 1
 25a:	f1 f7       	brne	.-4      	; 0x258 <LCDsendCommand+0x40>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <LCDsendCommand+0x46>
 25e:	00 00       	nop
 260:	08 95       	ret

00000262 <LCDGotoXY>:
 262:	62 30       	cpi	r22, 0x02	; 2
 264:	31 f0       	breq	.+12     	; 0x272 <LCDGotoXY+0x10>
 266:	63 30       	cpi	r22, 0x03	; 3
 268:	31 f0       	breq	.+12     	; 0x276 <LCDGotoXY+0x14>
 26a:	61 30       	cpi	r22, 0x01	; 1
 26c:	29 f4       	brne	.+10     	; 0x278 <LCDGotoXY+0x16>
 26e:	80 5c       	subi	r24, 0xC0	; 192
 270:	03 c0       	rjmp	.+6      	; 0x278 <LCDGotoXY+0x16>
 272:	8c 5e       	subi	r24, 0xEC	; 236
 274:	01 c0       	rjmp	.+2      	; 0x278 <LCDGotoXY+0x16>
 276:	8c 5a       	subi	r24, 0xAC	; 172
 278:	80 68       	ori	r24, 0x80	; 128
 27a:	0e 94 0c 01 	call	0x218	; 0x218 <LCDsendCommand>
 27e:	08 95       	ret

00000280 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
 280:	ff 92       	push	r15
 282:	0f 93       	push	r16
 284:	1f 93       	push	r17
 286:	cf 93       	push	r28
 288:	df 93       	push	r29
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
 28a:	66 0f       	add	r22, r22
 28c:	66 0f       	add	r22, r22
 28e:	66 0f       	add	r22, r22
 290:	60 64       	ori	r22, 0x40	; 64
 292:	ec 01       	movw	r28, r24
 294:	68 94       	set
 296:	ff 24       	eor	r15, r15
 298:	f3 f8       	bld	r15, 3
 29a:	f6 0e       	add	r15, r22
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
 29c:	fe 01       	movw	r30, r28
 29e:	04 91       	lpm	r16, Z
		LCDsendCommand(a++);
 2a0:	11 e0       	ldi	r17, 0x01	; 1
 2a2:	16 0f       	add	r17, r22
 2a4:	86 2f       	mov	r24, r22
 2a6:	0e 94 0c 01 	call	0x218	; 0x218 <LCDsendCommand>
		LCDsendChar(pcc);
 2aa:	80 2f       	mov	r24, r16
 2ac:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCDsendChar>
 2b0:	21 96       	adiw	r28, 0x01	; 1
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
 2b2:	61 2f       	mov	r22, r17
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
 2b4:	1f 11       	cpse	r17, r15
 2b6:	f2 cf       	rjmp	.-28     	; 0x29c <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
 2b8:	df 91       	pop	r29
 2ba:	cf 91       	pop	r28
 2bc:	1f 91       	pop	r17
 2be:	0f 91       	pop	r16
 2c0:	ff 90       	pop	r15
 2c2:	08 95       	ret

000002c4 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
void LCDinit(void)//Initializes LCD
{
 2c4:	1f 93       	push	r17
 2c6:	cf 93       	push	r28
 2c8:	df 93       	push	r29
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ca:	8f e2       	ldi	r24, 0x2F	; 47
 2cc:	95 e7       	ldi	r25, 0x75	; 117
 2ce:	01 97       	sbiw	r24, 0x01	; 1
 2d0:	f1 f7       	brne	.-4      	; 0x2ce <LCDinit+0xa>
 2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <LCDinit+0x10>
 2d4:	00 00       	nop
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
 2d6:	15 b8       	out	0x05, r1	; 5
	LCP=0x00;
 2d8:	15 b8       	out	0x05, r1	; 5
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
 2da:	84 b1       	in	r24, 0x04	; 4
 2dc:	80 6f       	ori	r24, 0xF0	; 240
 2de:	84 b9       	out	0x04, r24	; 4
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
 2e0:	84 b1       	in	r24, 0x04	; 4
 2e2:	87 60       	ori	r24, 0x07	; 7
 2e4:	84 b9       	out	0x04, r24	; 4
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
 2e6:	80 e3       	ldi	r24, 0x30	; 48
 2e8:	85 b9       	out	0x05, r24	; 5
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 2ea:	2a 9a       	sbi	0x05, 2	; 5
 2ec:	ef ec       	ldi	r30, 0xCF	; 207
 2ee:	f7 e0       	ldi	r31, 0x07	; 7
 2f0:	31 97       	sbiw	r30, 0x01	; 1
 2f2:	f1 f7       	brne	.-4      	; 0x2f0 <LCDinit+0x2c>
 2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <LCDinit+0x32>
 2f6:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 2f8:	2a 98       	cbi	0x05, 2	; 5
 2fa:	ef ec       	ldi	r30, 0xCF	; 207
 2fc:	f7 e0       	ldi	r31, 0x07	; 7
 2fe:	31 97       	sbiw	r30, 0x01	; 1
 300:	f1 f7       	brne	.-4      	; 0x2fe <LCDinit+0x3a>
 302:	00 c0       	rjmp	.+0      	; 0x304 <LCDinit+0x40>
 304:	00 00       	nop
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
 306:	85 b9       	out	0x05, r24	; 5
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 308:	2a 9a       	sbi	0x05, 2	; 5
 30a:	8f ec       	ldi	r24, 0xCF	; 207
 30c:	97 e0       	ldi	r25, 0x07	; 7
 30e:	01 97       	sbiw	r24, 0x01	; 1
 310:	f1 f7       	brne	.-4      	; 0x30e <LCDinit+0x4a>
 312:	00 c0       	rjmp	.+0      	; 0x314 <LCDinit+0x50>
 314:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 316:	2a 98       	cbi	0x05, 2	; 5
 318:	ef ec       	ldi	r30, 0xCF	; 207
 31a:	f7 e0       	ldi	r31, 0x07	; 7
 31c:	31 97       	sbiw	r30, 0x01	; 1
 31e:	f1 f7       	brne	.-4      	; 0x31c <LCDinit+0x58>
 320:	00 c0       	rjmp	.+0      	; 0x322 <LCDinit+0x5e>
 322:	00 00       	nop
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
 324:	80 e2       	ldi	r24, 0x20	; 32
 326:	85 b9       	out	0x05, r24	; 5
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 328:	2a 9a       	sbi	0x05, 2	; 5
 32a:	8f ec       	ldi	r24, 0xCF	; 207
 32c:	97 e0       	ldi	r25, 0x07	; 7
 32e:	01 97       	sbiw	r24, 0x01	; 1
 330:	f1 f7       	brne	.-4      	; 0x32e <LCDinit+0x6a>
 332:	00 c0       	rjmp	.+0      	; 0x334 <LCDinit+0x70>
 334:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 336:	2a 98       	cbi	0x05, 2	; 5
 338:	ef ec       	ldi	r30, 0xCF	; 207
 33a:	f7 e0       	ldi	r31, 0x07	; 7
 33c:	31 97       	sbiw	r30, 0x01	; 1
 33e:	f1 f7       	brne	.-4      	; 0x33c <LCDinit+0x78>
 340:	00 c0       	rjmp	.+0      	; 0x342 <LCDinit+0x7e>
 342:	00 00       	nop
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
 344:	88 e2       	ldi	r24, 0x28	; 40
 346:	0e 94 0c 01 	call	0x218	; 0x218 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
 34a:	8c e0       	ldi	r24, 0x0C	; 12
 34c:	0e 94 0c 01 	call	0x218	; 0x218 <LCDsendCommand>
 350:	c8 e5       	ldi	r28, 0x58	; 88
 352:	d1 e0       	ldi	r29, 0x01	; 1
		//init 8 custom chars
	uint8_t ch=0, chn=0;
 354:	60 e0       	ldi	r22, 0x00	; 0
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
 356:	11 e0       	ldi	r17, 0x01	; 1
 358:	16 0f       	add	r17, r22
 35a:	ce 01       	movw	r24, r28
 35c:	0e 94 40 01 	call	0x280	; 0x280 <LCDdefinechar>
 360:	28 96       	adiw	r28, 0x08	; 8
 362:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
 364:	18 30       	cpi	r17, 0x08	; 8
 366:	b9 f7       	brne	.-18     	; 0x356 <LCDinit+0x92>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
 368:	df 91       	pop	r29
 36a:	cf 91       	pop	r28
 36c:	1f 91       	pop	r17
 36e:	08 95       	ret

00000370 <actualizar_salida>:
	return (puerto>>4);
}
uint8_t get_entrada()
{
	return (puerto_lectura|0xF0);
}
 370:	2b b1       	in	r18, 0x0b	; 11
 372:	30 e1       	ldi	r19, 0x10	; 16
 374:	83 9f       	mul	r24, r19
 376:	c0 01       	movw	r24, r0
 378:	11 24       	eor	r1, r1
 37a:	2f 70       	andi	r18, 0x0F	; 15
 37c:	82 2b       	or	r24, r18
 37e:	8b b9       	out	0x0b, r24	; 11
 380:	08 95       	ret

00000382 <KEYPAD_scan>:
uint8_t KEYPAD_scan(uint8_t *key)
{
 382:	cf 93       	push	r28
 384:	df 93       	push	r29
 386:	ec 01       	movw	r28, r24
	DDR=0xF0;
 388:	80 ef       	ldi	r24, 0xF0	; 240
 38a:	8a b9       	out	0x0a, r24	; 10
	puerto=0x0F;
 38c:	8f e0       	ldi	r24, 0x0F	; 15
 38e:	8b b9       	out	0x0b, r24	; 11
	actualizar_salida(0);
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	0e 94 b8 01 	call	0x370	; 0x370 <actualizar_salida>
{
	return (puerto>>4);
}
uint8_t get_entrada()
{
	return (puerto_lectura|0xF0);
 396:	89 b1       	in	r24, 0x09	; 9
{
	DDR=0xF0;
	puerto=0x0F;
	actualizar_salida(0);

	if(get_entrada()==0xFF){return 0;}
 398:	80 6f       	ori	r24, 0xF0	; 240
 39a:	8f 3f       	cpi	r24, 0xFF	; 255
 39c:	09 f4       	brne	.+2      	; 0x3a0 <KEYPAD_scan+0x1e>
 39e:	62 c0       	rjmp	.+196    	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
	actualizar_salida(0b00001110);
 3a0:	8e e0       	ldi	r24, 0x0E	; 14
 3a2:	0e 94 b8 01 	call	0x370	; 0x370 <actualizar_salida>
{
	return (puerto>>4);
}
uint8_t get_entrada()
{
	return (puerto_lectura|0xF0);
 3a6:	89 b1       	in	r24, 0x09	; 9
	uint8_t lectura=0;
	while(1)
	{
		//_delay_ms(100);
		//si en la entrada solo hay 1111 significa que es la fila incorrecta, por lo que se niega la condicion y se continua con la siguiente fila
		if(!(get_entrada()==0xFF))
 3a8:	80 6f       	ori	r24, 0xF0	; 240
 3aa:	8f 3f       	cpi	r24, 0xFF	; 255
 3ac:	09 f4       	brne	.+2      	; 0x3b0 <KEYPAD_scan+0x2e>
 3ae:	4e c0       	rjmp	.+156    	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
		{
			lectura=puerto_lectura;
 3b0:	e9 b1       	in	r30, 0x09	; 9
			switch (lectura)
 3b2:	8e 2f       	mov	r24, r30
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	fc 01       	movw	r30, r24
 3b8:	e7 57       	subi	r30, 0x77	; 119
 3ba:	f1 09       	sbc	r31, r1
 3bc:	e8 37       	cpi	r30, 0x78	; 120
 3be:	f1 05       	cpc	r31, r1
 3c0:	08 f0       	brcs	.+2      	; 0x3c4 <KEYPAD_scan+0x42>
 3c2:	52 c0       	rjmp	.+164    	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 3c4:	ec 5c       	subi	r30, 0xCC	; 204
 3c6:	ff 4f       	sbci	r31, 0xFF	; 255
 3c8:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <__tablejump2__>
			{
				case 0b01110111:*key='7';break;
 3cc:	87 e3       	ldi	r24, 0x37	; 55
 3ce:	88 83       	st	Y, r24
				case 0b11100111:*key='p';break;
				case 0b11101011:*key='0';break;
				case 0b11101101:*key='=';break;
				case 0b11101110:*key='+';break;
			}
			return 1;
 3d0:	81 e0       	ldi	r24, 0x01	; 1
		if(!(get_entrada()==0xFF))
		{
			lectura=puerto_lectura;
			switch (lectura)
			{
				case 0b01110111:*key='7';break;
 3d2:	4b c0       	rjmp	.+150    	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
				case 0b01111011:*key='8';break;
 3d4:	88 e3       	ldi	r24, 0x38	; 56
 3d6:	88 83       	st	Y, r24
				case 0b11100111:*key='p';break;
				case 0b11101011:*key='0';break;
				case 0b11101101:*key='=';break;
				case 0b11101110:*key='+';break;
			}
			return 1;
 3d8:	81 e0       	ldi	r24, 0x01	; 1
		{
			lectura=puerto_lectura;
			switch (lectura)
			{
				case 0b01110111:*key='7';break;
				case 0b01111011:*key='8';break;
 3da:	47 c0       	rjmp	.+142    	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
				case 0b01111101:*key='9';break;
 3dc:	89 e3       	ldi	r24, 0x39	; 57
 3de:	88 83       	st	Y, r24
				case 0b11100111:*key='p';break;
				case 0b11101011:*key='0';break;
				case 0b11101101:*key='=';break;
				case 0b11101110:*key='+';break;
			}
			return 1;
 3e0:	81 e0       	ldi	r24, 0x01	; 1
			lectura=puerto_lectura;
			switch (lectura)
			{
				case 0b01110111:*key='7';break;
				case 0b01111011:*key='8';break;
				case 0b01111101:*key='9';break;
 3e2:	43 c0       	rjmp	.+134    	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
				case 0b01111110:*key='/';break;
 3e4:	8f e2       	ldi	r24, 0x2F	; 47
 3e6:	88 83       	st	Y, r24
				case 0b11100111:*key='p';break;
				case 0b11101011:*key='0';break;
				case 0b11101101:*key='=';break;
				case 0b11101110:*key='+';break;
			}
			return 1;
 3e8:	81 e0       	ldi	r24, 0x01	; 1
			switch (lectura)
			{
				case 0b01110111:*key='7';break;
				case 0b01111011:*key='8';break;
				case 0b01111101:*key='9';break;
				case 0b01111110:*key='/';break;
 3ea:	3f c0       	rjmp	.+126    	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
				
				case 0b10110111:*key='4';break;
 3ec:	84 e3       	ldi	r24, 0x34	; 52
 3ee:	88 83       	st	Y, r24
				case 0b11100111:*key='p';break;
				case 0b11101011:*key='0';break;
				case 0b11101101:*key='=';break;
				case 0b11101110:*key='+';break;
			}
			return 1;
 3f0:	81 e0       	ldi	r24, 0x01	; 1
				case 0b01110111:*key='7';break;
				case 0b01111011:*key='8';break;
				case 0b01111101:*key='9';break;
				case 0b01111110:*key='/';break;
				
				case 0b10110111:*key='4';break;
 3f2:	3b c0       	rjmp	.+118    	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
				case 0b10111011:*key='5';;break;
 3f4:	85 e3       	ldi	r24, 0x35	; 53
 3f6:	88 83       	st	Y, r24
				case 0b11100111:*key='p';break;
				case 0b11101011:*key='0';break;
				case 0b11101101:*key='=';break;
				case 0b11101110:*key='+';break;
			}
			return 1;
 3f8:	81 e0       	ldi	r24, 0x01	; 1
				case 0b01111011:*key='8';break;
				case 0b01111101:*key='9';break;
				case 0b01111110:*key='/';break;
				
				case 0b10110111:*key='4';break;
				case 0b10111011:*key='5';;break;
 3fa:	37 c0       	rjmp	.+110    	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
				case 0b10111101:*key='6';break;
 3fc:	86 e3       	ldi	r24, 0x36	; 54
 3fe:	88 83       	st	Y, r24
				case 0b11100111:*key='p';break;
				case 0b11101011:*key='0';break;
				case 0b11101101:*key='=';break;
				case 0b11101110:*key='+';break;
			}
			return 1;
 400:	81 e0       	ldi	r24, 0x01	; 1
				case 0b01111101:*key='9';break;
				case 0b01111110:*key='/';break;
				
				case 0b10110111:*key='4';break;
				case 0b10111011:*key='5';;break;
				case 0b10111101:*key='6';break;
 402:	33 c0       	rjmp	.+102    	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
				case 0b10111110:*key='*';break;
 404:	8a e2       	ldi	r24, 0x2A	; 42
 406:	88 83       	st	Y, r24
				case 0b11100111:*key='p';break;
				case 0b11101011:*key='0';break;
				case 0b11101101:*key='=';break;
				case 0b11101110:*key='+';break;
			}
			return 1;
 408:	81 e0       	ldi	r24, 0x01	; 1
				case 0b01111110:*key='/';break;
				
				case 0b10110111:*key='4';break;
				case 0b10111011:*key='5';;break;
				case 0b10111101:*key='6';break;
				case 0b10111110:*key='*';break;
 40a:	2f c0       	rjmp	.+94     	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
				
				case 0b11010111:*key='1';break;
 40c:	81 e3       	ldi	r24, 0x31	; 49
 40e:	88 83       	st	Y, r24
				case 0b11100111:*key='p';break;
				case 0b11101011:*key='0';break;
				case 0b11101101:*key='=';break;
				case 0b11101110:*key='+';break;
			}
			return 1;
 410:	81 e0       	ldi	r24, 0x01	; 1
				case 0b10110111:*key='4';break;
				case 0b10111011:*key='5';;break;
				case 0b10111101:*key='6';break;
				case 0b10111110:*key='*';break;
				
				case 0b11010111:*key='1';break;
 412:	2b c0       	rjmp	.+86     	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
				case 0b11011011:*key='2';break;
 414:	82 e3       	ldi	r24, 0x32	; 50
 416:	88 83       	st	Y, r24
				case 0b11100111:*key='p';break;
				case 0b11101011:*key='0';break;
				case 0b11101101:*key='=';break;
				case 0b11101110:*key='+';break;
			}
			return 1;
 418:	81 e0       	ldi	r24, 0x01	; 1
				case 0b10111011:*key='5';;break;
				case 0b10111101:*key='6';break;
				case 0b10111110:*key='*';break;
				
				case 0b11010111:*key='1';break;
				case 0b11011011:*key='2';break;
 41a:	27 c0       	rjmp	.+78     	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
				case 0b11011101:*key='3';break;
 41c:	83 e3       	ldi	r24, 0x33	; 51
 41e:	88 83       	st	Y, r24
				case 0b11100111:*key='p';break;
				case 0b11101011:*key='0';break;
				case 0b11101101:*key='=';break;
				case 0b11101110:*key='+';break;
			}
			return 1;
 420:	81 e0       	ldi	r24, 0x01	; 1
				case 0b10111101:*key='6';break;
				case 0b10111110:*key='*';break;
				
				case 0b11010111:*key='1';break;
				case 0b11011011:*key='2';break;
				case 0b11011101:*key='3';break;
 422:	23 c0       	rjmp	.+70     	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
				case 0b11011110:*key='-';break;
 424:	8d e2       	ldi	r24, 0x2D	; 45
 426:	88 83       	st	Y, r24
				case 0b11100111:*key='p';break;
				case 0b11101011:*key='0';break;
				case 0b11101101:*key='=';break;
				case 0b11101110:*key='+';break;
			}
			return 1;
 428:	81 e0       	ldi	r24, 0x01	; 1
				case 0b10111110:*key='*';break;
				
				case 0b11010111:*key='1';break;
				case 0b11011011:*key='2';break;
				case 0b11011101:*key='3';break;
				case 0b11011110:*key='-';break;
 42a:	1f c0       	rjmp	.+62     	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
				
				case 0b11100111:*key='p';break;
 42c:	80 e7       	ldi	r24, 0x70	; 112
 42e:	88 83       	st	Y, r24
				case 0b11101011:*key='0';break;
				case 0b11101101:*key='=';break;
				case 0b11101110:*key='+';break;
			}
			return 1;
 430:	81 e0       	ldi	r24, 0x01	; 1
				case 0b11010111:*key='1';break;
				case 0b11011011:*key='2';break;
				case 0b11011101:*key='3';break;
				case 0b11011110:*key='-';break;
				
				case 0b11100111:*key='p';break;
 432:	1b c0       	rjmp	.+54     	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
				case 0b11101011:*key='0';break;
 434:	80 e3       	ldi	r24, 0x30	; 48
 436:	88 83       	st	Y, r24
				case 0b11101101:*key='=';break;
				case 0b11101110:*key='+';break;
			}
			return 1;
 438:	81 e0       	ldi	r24, 0x01	; 1
				case 0b11011011:*key='2';break;
				case 0b11011101:*key='3';break;
				case 0b11011110:*key='-';break;
				
				case 0b11100111:*key='p';break;
				case 0b11101011:*key='0';break;
 43a:	17 c0       	rjmp	.+46     	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
				case 0b11101101:*key='=';break;
 43c:	8d e3       	ldi	r24, 0x3D	; 61
 43e:	88 83       	st	Y, r24
				case 0b11101110:*key='+';break;
			}
			return 1;
 440:	81 e0       	ldi	r24, 0x01	; 1
				case 0b11011101:*key='3';break;
				case 0b11011110:*key='-';break;
				
				case 0b11100111:*key='p';break;
				case 0b11101011:*key='0';break;
				case 0b11101101:*key='=';break;
 442:	13 c0       	rjmp	.+38     	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
				case 0b11101110:*key='+';break;
 444:	8b e2       	ldi	r24, 0x2B	; 43
 446:	88 83       	st	Y, r24
			}
			return 1;
 448:	81 e0       	ldi	r24, 0x01	; 1
				case 0b11011110:*key='-';break;
				
				case 0b11100111:*key='p';break;
				case 0b11101011:*key='0';break;
				case 0b11101101:*key='=';break;
				case 0b11101110:*key='+';break;
 44a:	0f c0       	rjmp	.+30     	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
	// como la salida se encuentra en los bits mas significativos, se lo corre 4 veces y se le añade la entrada que debe de ser igual
	puerto= (salida<<4) | (puerto & 0x0F);
}
uint8_t get_salida()
{
	return (puerto>>4);
 44c:	8b b1       	in	r24, 0x0b	; 11
				case 0b11101110:*key='+';break;
			}
			return 1;
		}
		//se realiza el corrimiento de los bits del puerto de salida, para probar la siguiente fila
		actualizar_salida((get_salida()<<1)+1);
 44e:	82 95       	swap	r24
 450:	8f 70       	andi	r24, 0x0F	; 15
 452:	88 0f       	add	r24, r24
 454:	8f 5f       	subi	r24, 0xFF	; 255
 456:	0e 94 b8 01 	call	0x370	; 0x370 <actualizar_salida>
{
	return (puerto>>4);
}
uint8_t get_entrada()
{
	return (puerto_lectura|0xF0);
 45a:	89 b1       	in	r24, 0x09	; 9
	uint8_t lectura=0;
	while(1)
	{
		//_delay_ms(100);
		//si en la entrada solo hay 1111 significa que es la fila incorrecta, por lo que se niega la condicion y se continua con la siguiente fila
		if(!(get_entrada()==0xFF))
 45c:	80 6f       	ori	r24, 0xF0	; 240
 45e:	8f 3f       	cpi	r24, 0xFF	; 255
 460:	a9 f3       	breq	.-22     	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 462:	a6 cf       	rjmp	.-180    	; 0x3b0 <KEYPAD_scan+0x2e>
{
	DDR=0xF0;
	puerto=0x0F;
	actualizar_salida(0);

	if(get_entrada()==0xFF){return 0;}
 464:	80 e0       	ldi	r24, 0x00	; 0
 466:	01 c0       	rjmp	.+2      	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
				case 0b11100111:*key='p';break;
				case 0b11101011:*key='0';break;
				case 0b11101101:*key='=';break;
				case 0b11101110:*key='+';break;
			}
			return 1;
 468:	81 e0       	ldi	r24, 0x01	; 1
		}
		//se realiza el corrimiento de los bits del puerto de salida, para probar la siguiente fila
		actualizar_salida((get_salida()<<1)+1);
	}
	return 0;
}
 46a:	df 91       	pop	r29
 46c:	cf 91       	pop	r28
 46e:	08 95       	ret

00000470 <KEYPAD_Update>:

uint8_t KEYPAD_Update (uint8_t *pkey)
{
 470:	cf 93       	push	r28
 472:	df 93       	push	r29
 474:	ec 01       	movw	r28, r24
	static uint8_t Old_key,Key, Last_valid_key=0xFF; // no hay tecla presionada
	if(!KEYPAD_scan(&Key)) {
 476:	83 e0       	ldi	r24, 0x03	; 3
 478:	91 e0       	ldi	r25, 0x01	; 1
 47a:	0e 94 c1 01 	call	0x382	; 0x382 <KEYPAD_scan>
 47e:	81 11       	cpse	r24, r1
 480:	06 c0       	rjmp	.+12     	; 0x48e <KEYPAD_Update+0x1e>
		Old_key=0xFF; // no hay tecla presionada
 482:	9f ef       	ldi	r25, 0xFF	; 255
 484:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__data_end>
		Last_valid_key=0xFF;
 488:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__DATA_REGION_ORIGIN__>
		return 0;
 48c:	14 c0       	rjmp	.+40     	; 0x4b6 <KEYPAD_Update+0x46>
	}
	if(Key==Old_key) { //2da verificación
 48e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <Key.1809>
 492:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__data_end>
 496:	89 13       	cpse	r24, r25
 498:	0b c0       	rjmp	.+22     	; 0x4b0 <KEYPAD_Update+0x40>
		if(Key!=Last_valid_key){ //evita múltiple detección
 49a:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 49e:	89 17       	cp	r24, r25
 4a0:	39 f0       	breq	.+14     	; 0x4b0 <KEYPAD_Update+0x40>
			*pkey=Key;
 4a2:	88 83       	st	Y, r24
			Last_valid_key = Key;
 4a4:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <Key.1809>
 4a8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			return 1;
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	03 c0       	rjmp	.+6      	; 0x4b6 <KEYPAD_Update+0x46>
		}
	}
	Old_key=Key; //1era verificación
 4b0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
	return 0;
 4b4:	80 e0       	ldi	r24, 0x00	; 0
}
 4b6:	df 91       	pop	r29
 4b8:	cf 91       	pop	r28
 4ba:	08 95       	ret

000004bc <main>:


int main(void)
{
 4bc:	cf 93       	push	r28
 4be:	df 93       	push	r29
 4c0:	1f 92       	push	r1
 4c2:	cd b7       	in	r28, 0x3d	; 61
 4c4:	de b7       	in	r29, 0x3e	; 62
	LCDinit();
 4c6:	0e 94 62 01 	call	0x2c4	; 0x2c4 <LCDinit>
	LCDGotoXY(0,0);
 4ca:	60 e0       	ldi	r22, 0x00	; 0
 4cc:	80 e0       	ldi	r24, 0x00	; 0
 4ce:	0e 94 31 01 	call	0x262	; 0x262 <LCDGotoXY>
	while (1)
	{
		uint8_t tecla=0;
 4d2:	19 82       	std	Y+1, r1	; 0x01
		//programa de testeo del KEYPAD_scan
		if(KEYPAD_Update(&tecla)){
 4d4:	ce 01       	movw	r24, r28
 4d6:	01 96       	adiw	r24, 0x01	; 1
 4d8:	0e 94 38 02 	call	0x470	; 0x470 <KEYPAD_Update>
 4dc:	88 23       	and	r24, r24
 4de:	19 f0       	breq	.+6      	; 0x4e6 <main+0x2a>
			LCDsendChar(tecla);
 4e0:	89 81       	ldd	r24, Y+1	; 0x01
 4e2:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCDsendChar>
 4e6:	8f e1       	ldi	r24, 0x1F	; 31
 4e8:	9e e4       	ldi	r25, 0x4E	; 78
 4ea:	01 97       	sbiw	r24, 0x01	; 1
 4ec:	f1 f7       	brne	.-4      	; 0x4ea <main+0x2e>
 4ee:	00 c0       	rjmp	.+0      	; 0x4f0 <main+0x34>
 4f0:	00 00       	nop
		}
		_delay_ms(10);
	}
 4f2:	ef cf       	rjmp	.-34     	; 0x4d2 <main+0x16>

000004f4 <__tablejump2__>:
 4f4:	ee 0f       	add	r30, r30
 4f6:	ff 1f       	adc	r31, r31
 4f8:	05 90       	lpm	r0, Z+
 4fa:	f4 91       	lpm	r31, Z
 4fc:	e0 2d       	mov	r30, r0
 4fe:	09 94       	ijmp

00000500 <_exit>:
 500:	f8 94       	cli

00000502 <__stop_program>:
 502:	ff cf       	rjmp	.-2      	; 0x502 <__stop_program>
