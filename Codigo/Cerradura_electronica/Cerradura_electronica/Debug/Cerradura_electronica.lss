
Cerradura_electronica.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  0000030c  00000380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000030c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000014b0  00000000  00000000  000004e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000936  00000000  00000000  00001994  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000081c  00000000  00000000  000022ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002ac  00000000  00000000  00002ae8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005f2  00000000  00000000  00002d94  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000010dc  00000000  00000000  00003386  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e0  00000000  00000000  00004462  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__ctors_end>
   4:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
   8:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
   c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  10:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  14:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  18:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  1c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  20:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  24:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  28:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  2c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  30:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  34:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  38:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  3c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  40:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  44:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  48:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  4c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  50:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  54:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  58:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  5c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  60:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  64:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>

00000068 <LcdCustomChar>:
  68:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
  78:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
  88:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
  98:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000000a8 <__ctors_end>:
  a8:	11 24       	eor	r1, r1
  aa:	1f be       	out	0x3f, r1	; 63
  ac:	cf ef       	ldi	r28, 0xFF	; 255
  ae:	d8 e0       	ldi	r29, 0x08	; 8
  b0:	de bf       	out	0x3e, r29	; 62
  b2:	cd bf       	out	0x3d, r28	; 61

000000b4 <__do_copy_data>:
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	a0 e0       	ldi	r26, 0x00	; 0
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	ec e0       	ldi	r30, 0x0C	; 12
  bc:	f3 e0       	ldi	r31, 0x03	; 3
  be:	02 c0       	rjmp	.+4      	; 0xc4 <__do_copy_data+0x10>
  c0:	05 90       	lpm	r0, Z+
  c2:	0d 92       	st	X+, r0
  c4:	ac 30       	cpi	r26, 0x0C	; 12
  c6:	b1 07       	cpc	r27, r17
  c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0xc>

000000ca <__do_clear_bss>:
  ca:	21 e0       	ldi	r18, 0x01	; 1
  cc:	ac e0       	ldi	r26, 0x0C	; 12
  ce:	b1 e0       	ldi	r27, 0x01	; 1
  d0:	01 c0       	rjmp	.+2      	; 0xd4 <.do_clear_bss_start>

000000d2 <.do_clear_bss_loop>:
  d2:	1d 92       	st	X+, r1

000000d4 <.do_clear_bss_start>:
  d4:	ac 30       	cpi	r26, 0x0C	; 12
  d6:	b2 07       	cpc	r27, r18
  d8:	e1 f7       	brne	.-8      	; 0xd2 <.do_clear_bss_loop>
  da:	0e 94 63 01 	call	0x2c6	; 0x2c6 <main>
  de:	0c 94 84 01 	jmp	0x308	; 0x308 <_exit>

000000e2 <__bad_interrupt>:
  e2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e6 <LCDsendChar>:
	LCDGotoXY(x,y);
	for(i=0;i<(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
  e6:	98 2f       	mov	r25, r24
  e8:	90 7f       	andi	r25, 0xF0	; 240
  ea:	95 b9       	out	0x05, r25	; 5
  ec:	28 9a       	sbi	0x05, 0	; 5
  ee:	2a 9a       	sbi	0x05, 2	; 5
  f0:	2a e6       	ldi	r18, 0x6A	; 106
  f2:	2a 95       	dec	r18
  f4:	f1 f7       	brne	.-4      	; 0xf2 <LCDsendChar+0xc>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <LCDsendChar+0x12>
  f8:	2a 98       	cbi	0x05, 2	; 5
  fa:	28 98       	cbi	0x05, 0	; 5
  fc:	9a e6       	ldi	r25, 0x6A	; 106
  fe:	9a 95       	dec	r25
 100:	f1 f7       	brne	.-4      	; 0xfe <LCDsendChar+0x18>
 102:	00 c0       	rjmp	.+0      	; 0x104 <LCDsendChar+0x1e>
 104:	20 e1       	ldi	r18, 0x10	; 16
 106:	82 9f       	mul	r24, r18
 108:	c0 01       	movw	r24, r0
 10a:	11 24       	eor	r1, r1
 10c:	85 b9       	out	0x05, r24	; 5
 10e:	28 9a       	sbi	0x05, 0	; 5
 110:	2a 9a       	sbi	0x05, 2	; 5
 112:	8a e6       	ldi	r24, 0x6A	; 106
 114:	8a 95       	dec	r24
 116:	f1 f7       	brne	.-4      	; 0x114 <LCDsendChar+0x2e>
 118:	00 c0       	rjmp	.+0      	; 0x11a <LCDsendChar+0x34>
 11a:	2a 98       	cbi	0x05, 2	; 5
 11c:	28 98       	cbi	0x05, 0	; 5
 11e:	9a e6       	ldi	r25, 0x6A	; 106
 120:	9a 95       	dec	r25
 122:	f1 f7       	brne	.-4      	; 0x120 <LCDsendChar+0x3a>
 124:	00 c0       	rjmp	.+0      	; 0x126 <LCDsendChar+0x40>
 126:	08 95       	ret

00000128 <LCDsendCommand>:
 128:	98 2f       	mov	r25, r24
 12a:	90 7f       	andi	r25, 0xF0	; 240
 12c:	95 b9       	out	0x05, r25	; 5
 12e:	2a 9a       	sbi	0x05, 2	; 5
 130:	ef ec       	ldi	r30, 0xCF	; 207
 132:	f7 e0       	ldi	r31, 0x07	; 7
 134:	31 97       	sbiw	r30, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <LCDsendCommand+0xc>
 138:	00 c0       	rjmp	.+0      	; 0x13a <LCDsendCommand+0x12>
 13a:	00 00       	nop
 13c:	2a 98       	cbi	0x05, 2	; 5
 13e:	ef ec       	ldi	r30, 0xCF	; 207
 140:	f7 e0       	ldi	r31, 0x07	; 7
 142:	31 97       	sbiw	r30, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <LCDsendCommand+0x1a>
 146:	00 c0       	rjmp	.+0      	; 0x148 <LCDsendCommand+0x20>
 148:	00 00       	nop
 14a:	f0 e1       	ldi	r31, 0x10	; 16
 14c:	8f 9f       	mul	r24, r31
 14e:	c0 01       	movw	r24, r0
 150:	11 24       	eor	r1, r1
 152:	85 b9       	out	0x05, r24	; 5
 154:	2a 9a       	sbi	0x05, 2	; 5
 156:	8f ec       	ldi	r24, 0xCF	; 207
 158:	97 e0       	ldi	r25, 0x07	; 7
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <LCDsendCommand+0x32>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <LCDsendCommand+0x38>
 160:	00 00       	nop
 162:	2a 98       	cbi	0x05, 2	; 5
 164:	ef ec       	ldi	r30, 0xCF	; 207
 166:	f7 e0       	ldi	r31, 0x07	; 7
 168:	31 97       	sbiw	r30, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <LCDsendCommand+0x40>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <LCDsendCommand+0x46>
 16e:	00 00       	nop
 170:	08 95       	ret

00000172 <LCDGotoXY>:
 172:	62 30       	cpi	r22, 0x02	; 2
 174:	31 f0       	breq	.+12     	; 0x182 <LCDGotoXY+0x10>
 176:	63 30       	cpi	r22, 0x03	; 3
 178:	31 f0       	breq	.+12     	; 0x186 <LCDGotoXY+0x14>
 17a:	61 30       	cpi	r22, 0x01	; 1
 17c:	29 f4       	brne	.+10     	; 0x188 <LCDGotoXY+0x16>
 17e:	80 5c       	subi	r24, 0xC0	; 192
 180:	03 c0       	rjmp	.+6      	; 0x188 <LCDGotoXY+0x16>
 182:	8c 5e       	subi	r24, 0xEC	; 236
 184:	01 c0       	rjmp	.+2      	; 0x188 <LCDGotoXY+0x16>
 186:	8c 5a       	subi	r24, 0xAC	; 172
 188:	80 68       	ori	r24, 0x80	; 128
 18a:	0e 94 94 00 	call	0x128	; 0x128 <LCDsendCommand>
 18e:	08 95       	ret

00000190 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
 190:	ff 92       	push	r15
 192:	0f 93       	push	r16
 194:	1f 93       	push	r17
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
 19a:	66 0f       	add	r22, r22
 19c:	66 0f       	add	r22, r22
 19e:	66 0f       	add	r22, r22
 1a0:	60 64       	ori	r22, 0x40	; 64
 1a2:	ec 01       	movw	r28, r24
 1a4:	68 94       	set
 1a6:	ff 24       	eor	r15, r15
 1a8:	f3 f8       	bld	r15, 3
 1aa:	f6 0e       	add	r15, r22
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
 1ac:	fe 01       	movw	r30, r28
 1ae:	04 91       	lpm	r16, Z
		LCDsendCommand(a++);
 1b0:	11 e0       	ldi	r17, 0x01	; 1
 1b2:	16 0f       	add	r17, r22
 1b4:	86 2f       	mov	r24, r22
 1b6:	0e 94 94 00 	call	0x128	; 0x128 <LCDsendCommand>
		LCDsendChar(pcc);
 1ba:	80 2f       	mov	r24, r16
 1bc:	0e 94 73 00 	call	0xe6	; 0xe6 <LCDsendChar>
 1c0:	21 96       	adiw	r28, 0x01	; 1
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
 1c2:	61 2f       	mov	r22, r17
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
 1c4:	1f 11       	cpse	r17, r15
 1c6:	f2 cf       	rjmp	.-28     	; 0x1ac <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
 1c8:	df 91       	pop	r29
 1ca:	cf 91       	pop	r28
 1cc:	1f 91       	pop	r17
 1ce:	0f 91       	pop	r16
 1d0:	ff 90       	pop	r15
 1d2:	08 95       	ret

000001d4 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
void LCDinit(void)//Initializes LCD
{
 1d4:	1f 93       	push	r17
 1d6:	cf 93       	push	r28
 1d8:	df 93       	push	r29
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1da:	8f e2       	ldi	r24, 0x2F	; 47
 1dc:	95 e7       	ldi	r25, 0x75	; 117
 1de:	01 97       	sbiw	r24, 0x01	; 1
 1e0:	f1 f7       	brne	.-4      	; 0x1de <LCDinit+0xa>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <LCDinit+0x10>
 1e4:	00 00       	nop
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
 1e6:	15 b8       	out	0x05, r1	; 5
	LCP=0x00;
 1e8:	15 b8       	out	0x05, r1	; 5
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
 1ea:	84 b1       	in	r24, 0x04	; 4
 1ec:	80 6f       	ori	r24, 0xF0	; 240
 1ee:	84 b9       	out	0x04, r24	; 4
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
 1f0:	84 b1       	in	r24, 0x04	; 4
 1f2:	87 60       	ori	r24, 0x07	; 7
 1f4:	84 b9       	out	0x04, r24	; 4
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
 1f6:	80 e3       	ldi	r24, 0x30	; 48
 1f8:	85 b9       	out	0x05, r24	; 5
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 1fa:	2a 9a       	sbi	0x05, 2	; 5
 1fc:	ef ec       	ldi	r30, 0xCF	; 207
 1fe:	f7 e0       	ldi	r31, 0x07	; 7
 200:	31 97       	sbiw	r30, 0x01	; 1
 202:	f1 f7       	brne	.-4      	; 0x200 <LCDinit+0x2c>
 204:	00 c0       	rjmp	.+0      	; 0x206 <LCDinit+0x32>
 206:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 208:	2a 98       	cbi	0x05, 2	; 5
 20a:	ef ec       	ldi	r30, 0xCF	; 207
 20c:	f7 e0       	ldi	r31, 0x07	; 7
 20e:	31 97       	sbiw	r30, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <LCDinit+0x3a>
 212:	00 c0       	rjmp	.+0      	; 0x214 <LCDinit+0x40>
 214:	00 00       	nop
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
 216:	85 b9       	out	0x05, r24	; 5
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 218:	2a 9a       	sbi	0x05, 2	; 5
 21a:	8f ec       	ldi	r24, 0xCF	; 207
 21c:	97 e0       	ldi	r25, 0x07	; 7
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <LCDinit+0x4a>
 222:	00 c0       	rjmp	.+0      	; 0x224 <LCDinit+0x50>
 224:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 226:	2a 98       	cbi	0x05, 2	; 5
 228:	ef ec       	ldi	r30, 0xCF	; 207
 22a:	f7 e0       	ldi	r31, 0x07	; 7
 22c:	31 97       	sbiw	r30, 0x01	; 1
 22e:	f1 f7       	brne	.-4      	; 0x22c <LCDinit+0x58>
 230:	00 c0       	rjmp	.+0      	; 0x232 <LCDinit+0x5e>
 232:	00 00       	nop
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
 234:	80 e2       	ldi	r24, 0x20	; 32
 236:	85 b9       	out	0x05, r24	; 5
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 238:	2a 9a       	sbi	0x05, 2	; 5
 23a:	8f ec       	ldi	r24, 0xCF	; 207
 23c:	97 e0       	ldi	r25, 0x07	; 7
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <LCDinit+0x6a>
 242:	00 c0       	rjmp	.+0      	; 0x244 <LCDinit+0x70>
 244:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 246:	2a 98       	cbi	0x05, 2	; 5
 248:	ef ec       	ldi	r30, 0xCF	; 207
 24a:	f7 e0       	ldi	r31, 0x07	; 7
 24c:	31 97       	sbiw	r30, 0x01	; 1
 24e:	f1 f7       	brne	.-4      	; 0x24c <LCDinit+0x78>
 250:	00 c0       	rjmp	.+0      	; 0x252 <LCDinit+0x7e>
 252:	00 00       	nop
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
 254:	88 e2       	ldi	r24, 0x28	; 40
 256:	0e 94 94 00 	call	0x128	; 0x128 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
 25a:	8c e0       	ldi	r24, 0x0C	; 12
 25c:	0e 94 94 00 	call	0x128	; 0x128 <LCDsendCommand>
 260:	c8 e6       	ldi	r28, 0x68	; 104
 262:	d0 e0       	ldi	r29, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
 264:	60 e0       	ldi	r22, 0x00	; 0
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
 266:	11 e0       	ldi	r17, 0x01	; 1
 268:	16 0f       	add	r17, r22
 26a:	ce 01       	movw	r24, r28
 26c:	0e 94 c8 00 	call	0x190	; 0x190 <LCDdefinechar>
 270:	28 96       	adiw	r28, 0x08	; 8
 272:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
 274:	18 30       	cpi	r17, 0x08	; 8
 276:	b9 f7       	brne	.-18     	; 0x266 <LCDinit+0x92>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
 278:	df 91       	pop	r29
 27a:	cf 91       	pop	r28
 27c:	1f 91       	pop	r17
 27e:	08 95       	ret

00000280 <mostrarString>:
		struct tm *tm = localtime(&t); //se le da el tiempo actual
		uint8_t tiempo[16]; //variable para almacenar el tiempo como string
		strftime(tiempo, sizeof(tiempo), "%c", tm); //guarda en el string tiempo lo que hay en tm
		mostrarString (tiempo,0,0, sizeof(tiempo));
	}
}
 280:	ef 92       	push	r14
 282:	ff 92       	push	r15
 284:	0f 93       	push	r16
 286:	1f 93       	push	r17
 288:	cf 93       	push	r28
 28a:	df 93       	push	r29
 28c:	7c 01       	movw	r14, r24
 28e:	86 2f       	mov	r24, r22
 290:	12 2f       	mov	r17, r18
 292:	64 2f       	mov	r22, r20
 294:	0e 94 b9 00 	call	0x172	; 0x172 <LCDGotoXY>
 298:	11 23       	and	r17, r17
 29a:	71 f0       	breq	.+28     	; 0x2b8 <mostrarString+0x38>
 29c:	e7 01       	movw	r28, r14
 29e:	11 50       	subi	r17, 0x01	; 1
 2a0:	01 2f       	mov	r16, r17
 2a2:	10 e0       	ldi	r17, 0x00	; 0
 2a4:	0f 5f       	subi	r16, 0xFF	; 255
 2a6:	1f 4f       	sbci	r17, 0xFF	; 255
 2a8:	0e 0d       	add	r16, r14
 2aa:	1f 1d       	adc	r17, r15
 2ac:	89 91       	ld	r24, Y+
 2ae:	0e 94 73 00 	call	0xe6	; 0xe6 <LCDsendChar>
 2b2:	c0 17       	cp	r28, r16
 2b4:	d1 07       	cpc	r29, r17
 2b6:	d1 f7       	brne	.-12     	; 0x2ac <mostrarString+0x2c>
 2b8:	df 91       	pop	r29
 2ba:	cf 91       	pop	r28
 2bc:	1f 91       	pop	r17
 2be:	0f 91       	pop	r16
 2c0:	ff 90       	pop	r15
 2c2:	ef 90       	pop	r14
 2c4:	08 95       	ret

000002c6 <main>:
int main(void)
{
 2c6:	cf 93       	push	r28
 2c8:	df 93       	push	r29
 2ca:	cd b7       	in	r28, 0x3d	; 61
 2cc:	de b7       	in	r29, 0x3e	; 62
 2ce:	27 97       	sbiw	r28, 0x07	; 7
 2d0:	0f b6       	in	r0, 0x3f	; 63
 2d2:	f8 94       	cli
 2d4:	de bf       	out	0x3e, r29	; 62
 2d6:	0f be       	out	0x3f, r0	; 63
 2d8:	cd bf       	out	0x3d, r28	; 61
	uint8_t locked[7] = BLOCKED;//{'c','e','r','r','a','d','o'}; //crea un string con la palabra cerrado
 2da:	87 e0       	ldi	r24, 0x07	; 7
 2dc:	e3 e0       	ldi	r30, 0x03	; 3
 2de:	f1 e0       	ldi	r31, 0x01	; 1
 2e0:	de 01       	movw	r26, r28
 2e2:	11 96       	adiw	r26, 0x01	; 1
 2e4:	01 90       	ld	r0, Z+
 2e6:	0d 92       	st	X+, r0
 2e8:	8a 95       	dec	r24
 2ea:	e1 f7       	brne	.-8      	; 0x2e4 <main+0x1e>
	LCDinit(); //se inicializa el display
 2ec:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCDinit>
	LCDGotoXY(0,0);
 2f0:	60 e0       	ldi	r22, 0x00	; 0
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	0e 94 b9 00 	call	0x172	; 0x172 <LCDGotoXY>
	//muestreoInicial();
	mostrarString(locked,0,1, sizeof(locked));
 2f8:	27 e0       	ldi	r18, 0x07	; 7
 2fa:	41 e0       	ldi	r20, 0x01	; 1
 2fc:	60 e0       	ldi	r22, 0x00	; 0
 2fe:	ce 01       	movw	r24, r28
 300:	01 96       	adiw	r24, 0x01	; 1
 302:	0e 94 40 01 	call	0x280	; 0x280 <mostrarString>
 306:	ff cf       	rjmp	.-2      	; 0x306 <main+0x40>

00000308 <_exit>:
 308:	f8 94       	cli

0000030a <__stop_program>:
 30a:	ff cf       	rjmp	.-2      	; 0x30a <__stop_program>
